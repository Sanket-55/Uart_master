
Uart_test_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080030d8  080030d8  000040d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080030f0  080030f0  000040f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080030f8  080030f8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f8  080030f8  000040f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080030fc  080030fc  000040fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003100  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000590  2000000c  0800310c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800310c  0000559c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c85c  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d5a  00000000  00000000  00011891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009e8  00000000  00000000  000135f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000079d  00000000  00000000  00013fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f7de  00000000  00000000  00014775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c072  00000000  00000000  00033f53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c13ee  00000000  00000000  0003ffc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001013b3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000293c  00000000  00000000  001013f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00103d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080030c0 	.word	0x080030c0

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	080030c0 	.word	0x080030c0

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295
 80001d8:	f000 b968 	b.w	80004ac <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9d08      	ldr	r5, [sp, #32]
 80001fa:	460c      	mov	r4, r1
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d14e      	bne.n	800029e <__udivmoddi4+0xaa>
 8000200:	4694      	mov	ip, r2
 8000202:	458c      	cmp	ip, r1
 8000204:	4686      	mov	lr, r0
 8000206:	fab2 f282 	clz	r2, r2
 800020a:	d962      	bls.n	80002d2 <__udivmoddi4+0xde>
 800020c:	b14a      	cbz	r2, 8000222 <__udivmoddi4+0x2e>
 800020e:	f1c2 0320 	rsb	r3, r2, #32
 8000212:	4091      	lsls	r1, r2
 8000214:	fa20 f303 	lsr.w	r3, r0, r3
 8000218:	fa0c fc02 	lsl.w	ip, ip, r2
 800021c:	4319      	orrs	r1, r3
 800021e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000222:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000226:	fbb1 f4f7 	udiv	r4, r1, r7
 800022a:	fb07 1114 	mls	r1, r7, r4, r1
 800022e:	fa1f f68c 	uxth.w	r6, ip
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023a:	fb04 f106 	mul.w	r1, r4, r6
 800023e:	4299      	cmp	r1, r3
 8000240:	d90a      	bls.n	8000258 <__udivmoddi4+0x64>
 8000242:	eb1c 0303 	adds.w	r3, ip, r3
 8000246:	f104 30ff 	add.w	r0, r4, #4294967295
 800024a:	f080 8110 	bcs.w	800046e <__udivmoddi4+0x27a>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 810d 	bls.w	800046e <__udivmoddi4+0x27a>
 8000254:	3c02      	subs	r4, #2
 8000256:	4463      	add	r3, ip
 8000258:	1a59      	subs	r1, r3, r1
 800025a:	fbb1 f0f7 	udiv	r0, r1, r7
 800025e:	fb07 1110 	mls	r1, r7, r0, r1
 8000262:	fb00 f606 	mul.w	r6, r0, r6
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	429e      	cmp	r6, r3
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0303 	adds.w	r3, ip, r3
 8000276:	f100 31ff 	add.w	r1, r0, #4294967295
 800027a:	f080 80fa 	bcs.w	8000472 <__udivmoddi4+0x27e>
 800027e:	429e      	cmp	r6, r3
 8000280:	f240 80f7 	bls.w	8000472 <__udivmoddi4+0x27e>
 8000284:	4463      	add	r3, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	1b9b      	subs	r3, r3, r6
 800028c:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa6>
 8000292:	40d3      	lsrs	r3, r2
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xba>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb4>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa6>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x150>
 80002b6:	42a3      	cmp	r3, r4
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xcc>
 80002ba:	4290      	cmp	r0, r2
 80002bc:	f0c0 80ee 	bcc.w	800049c <__udivmoddi4+0x2a8>
 80002c0:	1a86      	subs	r6, r0, r2
 80002c2:	eb64 0303 	sbc.w	r3, r4, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	d0e6      	beq.n	800029a <__udivmoddi4+0xa6>
 80002cc:	e9c5 6300 	strd	r6, r3, [r5]
 80002d0:	e7e3      	b.n	800029a <__udivmoddi4+0xa6>
 80002d2:	2a00      	cmp	r2, #0
 80002d4:	f040 808f 	bne.w	80003f6 <__udivmoddi4+0x202>
 80002d8:	eba1 040c 	sub.w	r4, r1, ip
 80002dc:	2101      	movs	r1, #1
 80002de:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e2:	fa1f f78c 	uxth.w	r7, ip
 80002e6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ea:	fb08 4416 	mls	r4, r8, r6, r4
 80002ee:	fb07 f006 	mul.w	r0, r7, r6
 80002f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	4298      	cmp	r0, r3
 80002fc:	d908      	bls.n	8000310 <__udivmoddi4+0x11c>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 34ff 	add.w	r4, r6, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x11a>
 8000308:	4298      	cmp	r0, r3
 800030a:	f200 80cb 	bhi.w	80004a4 <__udivmoddi4+0x2b0>
 800030e:	4626      	mov	r6, r4
 8000310:	1a1c      	subs	r4, r3, r0
 8000312:	fbb4 f0f8 	udiv	r0, r4, r8
 8000316:	fb08 4410 	mls	r4, r8, r0, r4
 800031a:	fb00 f707 	mul.w	r7, r0, r7
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	429f      	cmp	r7, r3
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x148>
 800032a:	eb1c 0303 	adds.w	r3, ip, r3
 800032e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x146>
 8000334:	429f      	cmp	r7, r3
 8000336:	f200 80ae 	bhi.w	8000496 <__udivmoddi4+0x2a2>
 800033a:	4620      	mov	r0, r4
 800033c:	1bdb      	subs	r3, r3, r7
 800033e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x9c>
 8000344:	f1c1 0720 	rsb	r7, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 fc07 	lsr.w	ip, r2, r7
 800034e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000352:	fa24 f607 	lsr.w	r6, r4, r7
 8000356:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800035a:	fbb6 f8f9 	udiv	r8, r6, r9
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	fb09 6618 	mls	r6, r9, r8, r6
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	408c      	lsls	r4, r1
 800036c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000370:	fb08 f00e 	mul.w	r0, r8, lr
 8000374:	431c      	orrs	r4, r3
 8000376:	0c23      	lsrs	r3, r4, #16
 8000378:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800037c:	4298      	cmp	r0, r3
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x1a6>
 8000384:	eb1c 0303 	adds.w	r3, ip, r3
 8000388:	f108 36ff 	add.w	r6, r8, #4294967295
 800038c:	f080 8081 	bcs.w	8000492 <__udivmoddi4+0x29e>
 8000390:	4298      	cmp	r0, r3
 8000392:	d97e      	bls.n	8000492 <__udivmoddi4+0x29e>
 8000394:	f1a8 0802 	sub.w	r8, r8, #2
 8000398:	4463      	add	r3, ip
 800039a:	1a1e      	subs	r6, r3, r0
 800039c:	fbb6 f3f9 	udiv	r3, r6, r9
 80003a0:	fb09 6613 	mls	r6, r9, r3, r6
 80003a4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003a8:	b2a4      	uxth	r4, r4
 80003aa:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x1d0>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f103 30ff 	add.w	r0, r3, #4294967295
 80003ba:	d266      	bcs.n	800048a <__udivmoddi4+0x296>
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d964      	bls.n	800048a <__udivmoddi4+0x296>
 80003c0:	3b02      	subs	r3, #2
 80003c2:	4464      	add	r4, ip
 80003c4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80003c8:	fba0 8302 	umull	r8, r3, r0, r2
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	429c      	cmp	r4, r3
 80003d2:	46c6      	mov	lr, r8
 80003d4:	461e      	mov	r6, r3
 80003d6:	d350      	bcc.n	800047a <__udivmoddi4+0x286>
 80003d8:	d04d      	beq.n	8000476 <__udivmoddi4+0x282>
 80003da:	b155      	cbz	r5, 80003f2 <__udivmoddi4+0x1fe>
 80003dc:	ebba 030e 	subs.w	r3, sl, lr
 80003e0:	eb64 0406 	sbc.w	r4, r4, r6
 80003e4:	fa04 f707 	lsl.w	r7, r4, r7
 80003e8:	40cb      	lsrs	r3, r1
 80003ea:	431f      	orrs	r7, r3
 80003ec:	40cc      	lsrs	r4, r1
 80003ee:	e9c5 7400 	strd	r7, r4, [r5]
 80003f2:	2100      	movs	r1, #0
 80003f4:	e751      	b.n	800029a <__udivmoddi4+0xa6>
 80003f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	40d9      	lsrs	r1, r3
 8000400:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000404:	fa20 f303 	lsr.w	r3, r0, r3
 8000408:	fa00 fe02 	lsl.w	lr, r0, r2
 800040c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000410:	fb08 1110 	mls	r1, r8, r0, r1
 8000414:	4094      	lsls	r4, r2
 8000416:	431c      	orrs	r4, r3
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	0c23      	lsrs	r3, r4, #16
 800041e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000422:	fb00 f107 	mul.w	r1, r0, r7
 8000426:	4299      	cmp	r1, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x248>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000432:	d22c      	bcs.n	800048e <__udivmoddi4+0x29a>
 8000434:	4299      	cmp	r1, r3
 8000436:	d92a      	bls.n	800048e <__udivmoddi4+0x29a>
 8000438:	3802      	subs	r0, #2
 800043a:	4463      	add	r3, ip
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	fbb3 f1f8 	udiv	r1, r3, r8
 8000442:	fb08 3311 	mls	r3, r8, r1, r3
 8000446:	b2a4      	uxth	r4, r4
 8000448:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800044c:	fb01 f307 	mul.w	r3, r1, r7
 8000450:	42a3      	cmp	r3, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x272>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f101 36ff 	add.w	r6, r1, #4294967295
 800045c:	d213      	bcs.n	8000486 <__udivmoddi4+0x292>
 800045e:	42a3      	cmp	r3, r4
 8000460:	d911      	bls.n	8000486 <__udivmoddi4+0x292>
 8000462:	3902      	subs	r1, #2
 8000464:	4464      	add	r4, ip
 8000466:	1ae4      	subs	r4, r4, r3
 8000468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800046c:	e73b      	b.n	80002e6 <__udivmoddi4+0xf2>
 800046e:	4604      	mov	r4, r0
 8000470:	e6f2      	b.n	8000258 <__udivmoddi4+0x64>
 8000472:	4608      	mov	r0, r1
 8000474:	e708      	b.n	8000288 <__udivmoddi4+0x94>
 8000476:	45c2      	cmp	sl, r8
 8000478:	d2af      	bcs.n	80003da <__udivmoddi4+0x1e6>
 800047a:	ebb8 0e02 	subs.w	lr, r8, r2
 800047e:	eb63 060c 	sbc.w	r6, r3, ip
 8000482:	3801      	subs	r0, #1
 8000484:	e7a9      	b.n	80003da <__udivmoddi4+0x1e6>
 8000486:	4631      	mov	r1, r6
 8000488:	e7ed      	b.n	8000466 <__udivmoddi4+0x272>
 800048a:	4603      	mov	r3, r0
 800048c:	e79a      	b.n	80003c4 <__udivmoddi4+0x1d0>
 800048e:	4630      	mov	r0, r6
 8000490:	e7d4      	b.n	800043c <__udivmoddi4+0x248>
 8000492:	46b0      	mov	r8, r6
 8000494:	e781      	b.n	800039a <__udivmoddi4+0x1a6>
 8000496:	4463      	add	r3, ip
 8000498:	3802      	subs	r0, #2
 800049a:	e74f      	b.n	800033c <__udivmoddi4+0x148>
 800049c:	4606      	mov	r6, r0
 800049e:	4623      	mov	r3, r4
 80004a0:	4608      	mov	r0, r1
 80004a2:	e711      	b.n	80002c8 <__udivmoddi4+0xd4>
 80004a4:	3e02      	subs	r6, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	e732      	b.n	8000310 <__udivmoddi4+0x11c>
 80004aa:	bf00      	nop

080004ac <__aeabi_idiv0>:
 80004ac:	4770      	bx	lr
 80004ae:	bf00      	nop

080004b0 <main>:
  */



int main(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004b4:	f000 fb42 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004b8:	f000 f82c 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004bc:	f000 f8ee 	bl	800069c <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 80004c0:	f000 f898 	bl	80005f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004c4:	f000 f8c0 	bl	8000648 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f86a 	bl	80005a0 <MX_USART2_UART_Init>
  HAL_UART_Receive_IT(&huart2, &data, 1);
 80004cc:	2201      	movs	r2, #1
 80004ce:	4903      	ldr	r1, [pc, #12]	@ (80004dc <main+0x2c>)
 80004d0:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <main+0x30>)
 80004d2:	f001 fd48 	bl	8001f66 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004d6:	bf00      	nop
 80004d8:	e7fd      	b.n	80004d6 <main+0x26>
 80004da:	bf00      	nop
 80004dc:	20000594 	.word	0x20000594
 80004e0:	20000028 	.word	0x20000028

080004e4 <HAL_UART_RxCpltCallback>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit_IT(&huart3, &data, 1);
 80004ec:	2201      	movs	r2, #1
 80004ee:	4906      	ldr	r1, [pc, #24]	@ (8000508 <HAL_UART_RxCpltCallback+0x24>)
 80004f0:	4806      	ldr	r0, [pc, #24]	@ (800050c <HAL_UART_RxCpltCallback+0x28>)
 80004f2:	f001 fd03 	bl	8001efc <HAL_UART_Transmit_IT>

    HAL_UART_Receive_IT(&huart2, &data, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4903      	ldr	r1, [pc, #12]	@ (8000508 <HAL_UART_RxCpltCallback+0x24>)
 80004fa:	4805      	ldr	r0, [pc, #20]	@ (8000510 <HAL_UART_RxCpltCallback+0x2c>)
 80004fc:	f001 fd33 	bl	8001f66 <HAL_UART_Receive_IT>
}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000594 	.word	0x20000594
 800050c:	20000070 	.word	0x20000070
 8000510:	20000028 	.word	0x20000028

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b092      	sub	sp, #72	@ 0x48
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2230      	movs	r2, #48	@ 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f002 fd9f 	bl	8003066 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000536:	2301      	movs	r3, #1
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800053e:	2302      	movs	r3, #2
 8000540:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000542:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000546:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000548:	2308      	movs	r3, #8
 800054a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 240;
 800054c:	23f0      	movs	r3, #240	@ 0xf0
 800054e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000550:	2302      	movs	r3, #2
 8000552:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000554:	2305      	movs	r3, #5
 8000556:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000558:	f107 0318 	add.w	r3, r7, #24
 800055c:	4618      	mov	r0, r3
 800055e:	f000 ffe3 	bl	8001528 <HAL_RCC_OscConfig>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000568:	f000 f946 	bl	80007f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800056c:	230f      	movs	r3, #15
 800056e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000570:	2302      	movs	r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000574:	2300      	movs	r3, #0
 8000576:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000578:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800057c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800057e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000582:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2103      	movs	r1, #3
 8000588:	4618      	mov	r0, r3
 800058a:	f001 fa21 	bl	80019d0 <HAL_RCC_ClockConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000594:	f000 f930 	bl	80007f8 <Error_Handler>
  }
}
 8000598:	bf00      	nop
 800059a:	3748      	adds	r7, #72	@ 0x48
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005a4:	4b11      	ldr	r3, [pc, #68]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005a6:	4a12      	ldr	r2, [pc, #72]	@ (80005f0 <MX_USART2_UART_Init+0x50>)
 80005a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80005aa:	4b10      	ldr	r3, [pc, #64]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80005b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005b8:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005c4:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005c6:	220c      	movs	r2, #12
 80005c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005ca:	4b08      	ldr	r3, [pc, #32]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d0:	4b06      	ldr	r3, [pc, #24]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d6:	4805      	ldr	r0, [pc, #20]	@ (80005ec <MX_USART2_UART_Init+0x4c>)
 80005d8:	f001 fc40 	bl	8001e5c <HAL_UART_Init>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005e2:	f000 f909 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000028 	.word	0x20000028
 80005f0:	40004400 	.word	0x40004400

080005f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <MX_USART3_UART_Init+0x50>)
 80005fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 8000600:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000604:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800060c:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 800060e:	2200      	movs	r2, #0
 8000610:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000618:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 800061a:	220c      	movs	r2, #12
 800061c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000624:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800062a:	4805      	ldr	r0, [pc, #20]	@ (8000640 <MX_USART3_UART_Init+0x4c>)
 800062c:	f001 fc16 	bl	8001e5c <HAL_UART_Init>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000636:	f000 f8df 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800063a:	bf00      	nop
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000070 	.word	0x20000070
 8000644:	40004800 	.word	0x40004800

08000648 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800064c:	4b12      	ldr	r3, [pc, #72]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800064e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000652:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000654:	4b10      	ldr	r3, [pc, #64]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000656:	2204      	movs	r2, #4
 8000658:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800065a:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800065c:	2202      	movs	r2, #2
 800065e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000666:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000668:	2202      	movs	r2, #2
 800066a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800066c:	4b0a      	ldr	r3, [pc, #40]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800066e:	2201      	movs	r2, #1
 8000670:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000674:	2200      	movs	r2, #0
 8000676:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000678:	4b07      	ldr	r3, [pc, #28]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800067a:	2201      	movs	r2, #1
 800067c:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800067e:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000680:	2200      	movs	r2, #0
 8000682:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000684:	4804      	ldr	r0, [pc, #16]	@ (8000698 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000686:	f000 fe3f 	bl	8001308 <HAL_PCD_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000690:	f000 f8b2 	bl	80007f8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	bd80      	pop	{r7, pc}
 8000698:	200000b8 	.word	0x200000b8

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b08c      	sub	sp, #48	@ 0x30
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 031c 	add.w	r3, r7, #28
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
 80006b6:	4b4c      	ldr	r3, [pc, #304]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	4a4b      	ldr	r2, [pc, #300]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006bc:	f043 0304 	orr.w	r3, r3, #4
 80006c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c2:	4b49      	ldr	r3, [pc, #292]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006c6:	f003 0304 	and.w	r3, r3, #4
 80006ca:	61bb      	str	r3, [r7, #24]
 80006cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	617b      	str	r3, [r7, #20]
 80006d2:	4b45      	ldr	r3, [pc, #276]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d6:	4a44      	ldr	r2, [pc, #272]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006de:	4b42      	ldr	r3, [pc, #264]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	613b      	str	r3, [r7, #16]
 80006ee:	4b3e      	ldr	r3, [pc, #248]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f2:	4a3d      	ldr	r2, [pc, #244]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006f4:	f043 0301 	orr.w	r3, r3, #1
 80006f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fa:	4b3b      	ldr	r3, [pc, #236]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	f003 0301 	and.w	r3, r3, #1
 8000702:	613b      	str	r3, [r7, #16]
 8000704:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	4b37      	ldr	r3, [pc, #220]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070e:	4a36      	ldr	r2, [pc, #216]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000710:	f043 0302 	orr.w	r3, r3, #2
 8000714:	6313      	str	r3, [r2, #48]	@ 0x30
 8000716:	4b34      	ldr	r3, [pc, #208]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	f003 0302 	and.w	r3, r3, #2
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072a:	4a2f      	ldr	r2, [pc, #188]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 800072c:	f043 0308 	orr.w	r3, r3, #8
 8000730:	6313      	str	r3, [r2, #48]	@ 0x30
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	f003 0308 	and.w	r3, r3, #8
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	4b29      	ldr	r3, [pc, #164]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000746:	4a28      	ldr	r2, [pc, #160]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800074c:	6313      	str	r3, [r2, #48]	@ 0x30
 800074e:	4b26      	ldr	r3, [pc, #152]	@ (80007e8 <MX_GPIO_Init+0x14c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800075a:	2200      	movs	r2, #0
 800075c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000760:	4822      	ldr	r0, [pc, #136]	@ (80007ec <MX_GPIO_Init+0x150>)
 8000762:	f000 fdb9 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2140      	movs	r1, #64	@ 0x40
 800076a:	4821      	ldr	r0, [pc, #132]	@ (80007f0 <MX_GPIO_Init+0x154>)
 800076c:	f000 fdb4 	bl	80012d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000770:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000774:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000776:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800077a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	481b      	ldr	r0, [pc, #108]	@ (80007f4 <MX_GPIO_Init+0x158>)
 8000788:	f000 fc08 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800078c:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000790:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079a:	2300      	movs	r3, #0
 800079c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	4811      	ldr	r0, [pc, #68]	@ (80007ec <MX_GPIO_Init+0x150>)
 80007a6:	f000 fbf9 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007aa:	2340      	movs	r3, #64	@ 0x40
 80007ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ae:	2301      	movs	r3, #1
 80007b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007ba:	f107 031c 	add.w	r3, r7, #28
 80007be:	4619      	mov	r1, r3
 80007c0:	480b      	ldr	r0, [pc, #44]	@ (80007f0 <MX_GPIO_Init+0x154>)
 80007c2:	f000 fbeb 	bl	8000f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007c6:	2380      	movs	r3, #128	@ 0x80
 80007c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ca:	2300      	movs	r3, #0
 80007cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4805      	ldr	r0, [pc, #20]	@ (80007f0 <MX_GPIO_Init+0x154>)
 80007da:	f000 fbdf 	bl	8000f9c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	@ 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020400 	.word	0x40020400
 80007f0:	40021800 	.word	0x40021800
 80007f4:	40020800 	.word	0x40020800

080007f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007fc:	b672      	cpsid	i
}
 80007fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000800:	bf00      	nop
 8000802:	e7fd      	b.n	8000800 <Error_Handler+0x8>

08000804 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	607b      	str	r3, [r7, #4]
 800080e:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <HAL_MspInit+0x48>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <HAL_MspInit+0x48>)
 8000814:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000818:	6453      	str	r3, [r2, #68]	@ 0x44
 800081a:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <HAL_MspInit+0x48>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	603b      	str	r3, [r7, #0]
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <HAL_MspInit+0x48>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	4a07      	ldr	r2, [pc, #28]	@ (800084c <HAL_MspInit+0x48>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	6413      	str	r3, [r2, #64]	@ 0x40
 8000836:	4b05      	ldr	r3, [pc, #20]	@ (800084c <HAL_MspInit+0x48>)
 8000838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr
 800084c:	40023800 	.word	0x40023800

08000850 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b08c      	sub	sp, #48	@ 0x30
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a49      	ldr	r2, [pc, #292]	@ (8000994 <HAL_UART_MspInit+0x144>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d152      	bne.n	8000918 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	61bb      	str	r3, [r7, #24]
 8000876:	4b48      	ldr	r3, [pc, #288]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800087a:	4a47      	ldr	r2, [pc, #284]	@ (8000998 <HAL_UART_MspInit+0x148>)
 800087c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000880:	6413      	str	r3, [r2, #64]	@ 0x40
 8000882:	4b45      	ldr	r3, [pc, #276]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800088a:	61bb      	str	r3, [r7, #24]
 800088c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	4b41      	ldr	r3, [pc, #260]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a40      	ldr	r2, [pc, #256]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3e      	ldr	r3, [pc, #248]	@ (8000998 <HAL_UART_MspInit+0x148>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	617b      	str	r3, [r7, #20]
 80008a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b3a      	ldr	r3, [pc, #232]	@ (8000998 <HAL_UART_MspInit+0x148>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a39      	ldr	r2, [pc, #228]	@ (8000998 <HAL_UART_MspInit+0x148>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b37      	ldr	r3, [pc, #220]	@ (8000998 <HAL_UART_MspInit+0x148>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008c6:	2308      	movs	r3, #8
 80008c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	2302      	movs	r3, #2
 80008cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d2:	2303      	movs	r3, #3
 80008d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008d6:	2307      	movs	r3, #7
 80008d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <HAL_UART_MspInit+0x14c>)
 80008e2:	f000 fb5b 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008e6:	2320      	movs	r3, #32
 80008e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ea:	2302      	movs	r3, #2
 80008ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f6:	2307      	movs	r3, #7
 80008f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4827      	ldr	r0, [pc, #156]	@ (80009a0 <HAL_UART_MspInit+0x150>)
 8000902:	f000 fb4b 	bl	8000f9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2026      	movs	r0, #38	@ 0x26
 800090c:	f000 fa7f 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000910:	2026      	movs	r0, #38	@ 0x26
 8000912:	f000 fa98 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000916:	e039      	b.n	800098c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART3)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a21      	ldr	r2, [pc, #132]	@ (80009a4 <HAL_UART_MspInit+0x154>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d134      	bne.n	800098c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b1c      	ldr	r3, [pc, #112]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800092a:	4a1b      	ldr	r2, [pc, #108]	@ (8000998 <HAL_UART_MspInit+0x148>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000930:	6413      	str	r3, [r2, #64]	@ 0x40
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	60bb      	str	r3, [r7, #8]
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000946:	4a14      	ldr	r2, [pc, #80]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000948:	f043 0308 	orr.w	r3, r3, #8
 800094c:	6313      	str	r3, [r2, #48]	@ 0x30
 800094e:	4b12      	ldr	r3, [pc, #72]	@ (8000998 <HAL_UART_MspInit+0x148>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000952:	f003 0308 	and.w	r3, r3, #8
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800095a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000960:	2302      	movs	r3, #2
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000964:	2300      	movs	r3, #0
 8000966:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000968:	2303      	movs	r3, #3
 800096a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800096c:	2307      	movs	r3, #7
 800096e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000970:	f107 031c 	add.w	r3, r7, #28
 8000974:	4619      	mov	r1, r3
 8000976:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <HAL_UART_MspInit+0x150>)
 8000978:	f000 fb10 	bl	8000f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2027      	movs	r0, #39	@ 0x27
 8000982:	f000 fa44 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000986:	2027      	movs	r0, #39	@ 0x27
 8000988:	f000 fa5d 	bl	8000e46 <HAL_NVIC_EnableIRQ>
}
 800098c:	bf00      	nop
 800098e:	3730      	adds	r7, #48	@ 0x30
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40004400 	.word	0x40004400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000
 80009a0:	40020c00 	.word	0x40020c00
 80009a4:	40004800 	.word	0x40004800

080009a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80009c8:	d13f      	bne.n	8000a4a <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b21      	ldr	r3, [pc, #132]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	4a20      	ldr	r2, [pc, #128]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009da:	4b1e      	ldr	r3, [pc, #120]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80009e6:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80009ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ec:	2302      	movs	r3, #2
 80009ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f4:	2303      	movs	r3, #3
 80009f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009f8:	230a      	movs	r3, #10
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fc:	f107 0314 	add.w	r3, r7, #20
 8000a00:	4619      	mov	r1, r3
 8000a02:	4815      	ldr	r0, [pc, #84]	@ (8000a58 <HAL_PCD_MspInit+0xb0>)
 8000a04:	f000 faca 	bl	8000f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480e      	ldr	r0, [pc, #56]	@ (8000a58 <HAL_PCD_MspInit+0xb0>)
 8000a1e:	f000 fabd 	bl	8000f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a22:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 8000a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a26:	4a0b      	ldr	r2, [pc, #44]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a2c:	6353      	str	r3, [r2, #52]	@ 0x34
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60fb      	str	r3, [r7, #12]
 8000a32:	4b08      	ldr	r3, [pc, #32]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 8000a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a36:	4a07      	ldr	r2, [pc, #28]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3e:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <HAL_PCD_MspInit+0xac>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a46:	60fb      	str	r3, [r7, #12]
 8000a48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8000a4a:	bf00      	nop
 8000a4c:	3728      	adds	r7, #40	@ 0x28
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020000 	.word	0x40020000

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a60:	bf00      	nop
 8000a62:	e7fd      	b.n	8000a60 <NMI_Handler+0x4>

08000a64 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a68:	bf00      	nop
 8000a6a:	e7fd      	b.n	8000a68 <HardFault_Handler+0x4>

08000a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a70:	bf00      	nop
 8000a72:	e7fd      	b.n	8000a70 <MemManage_Handler+0x4>

08000a74 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	bf00      	nop
 8000a82:	e7fd      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a84 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a88:	bf00      	nop
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bc80      	pop	{r7}
 8000a9a:	4770      	bx	lr

08000a9c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bc80      	pop	{r7}
 8000aa6:	4770      	bx	lr

08000aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aac:	f000 f898 	bl	8000be0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	@ (8000ac4 <USART2_IRQHandler+0x10>)
 8000aba:	f001 fa79 	bl	8001fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000028 	.word	0x20000028

08000ac8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000acc:	4802      	ldr	r0, [pc, #8]	@ (8000ad8 <USART3_IRQHandler+0x10>)
 8000ace:	f001 fa6f 	bl	8001fb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000070 	.word	0x20000070

08000adc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ae0:	bf00      	nop
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000aec:	f7ff fff6 	bl	8000adc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000af0:	480c      	ldr	r0, [pc, #48]	@ (8000b24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000af2:	490d      	ldr	r1, [pc, #52]	@ (8000b28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000af4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af8:	e002      	b.n	8000b00 <LoopCopyDataInit>

08000afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000afe:	3304      	adds	r3, #4

08000b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b04:	d3f9      	bcc.n	8000afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b06:	4a0a      	ldr	r2, [pc, #40]	@ (8000b30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b08:	4c0a      	ldr	r4, [pc, #40]	@ (8000b34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b0c:	e001      	b.n	8000b12 <LoopFillZerobss>

08000b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b10:	3204      	adds	r2, #4

08000b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b14:	d3fb      	bcc.n	8000b0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b16:	f002 faaf 	bl	8003078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b1a:	f7ff fcc9 	bl	80004b0 <main>
  bx  lr
 8000b1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b2c:	08003100 	.word	0x08003100
  ldr r2, =_sbss
 8000b30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b34:	2000059c 	.word	0x2000059c

08000b38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b40:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <HAL_Init+0x40>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <HAL_Init+0x40>)
 8000b46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_Init+0x40>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a0a      	ldr	r2, [pc, #40]	@ (8000b7c <HAL_Init+0x40>)
 8000b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b58:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_Init+0x40>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a07      	ldr	r2, [pc, #28]	@ (8000b7c <HAL_Init+0x40>)
 8000b5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b64:	2003      	movs	r0, #3
 8000b66:	f000 f947 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	f000 f808 	bl	8000b80 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b70:	f7ff fe48 	bl	8000804 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b74:	2300      	movs	r3, #0
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023c00 	.word	0x40023c00

08000b80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	4b12      	ldr	r3, [pc, #72]	@ (8000bd4 <HAL_InitTick+0x54>)
 8000b8a:	681a      	ldr	r2, [r3, #0]
 8000b8c:	4b12      	ldr	r3, [pc, #72]	@ (8000bd8 <HAL_InitTick+0x58>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	4619      	mov	r1, r3
 8000b92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f000 f95f 	bl	8000e62 <HAL_SYSTICK_Config>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
 8000bac:	e00e      	b.n	8000bcc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d80a      	bhi.n	8000bca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bbc:	f000 f927 	bl	8000e0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bc0:	4a06      	ldr	r2, [pc, #24]	@ (8000bdc <HAL_InitTick+0x5c>)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e000      	b.n	8000bcc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	20000008 	.word	0x20000008
 8000bdc:	20000004 	.word	0x20000004

08000be0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be4:	4b05      	ldr	r3, [pc, #20]	@ (8000bfc <HAL_IncTick+0x1c>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	461a      	mov	r2, r3
 8000bea:	4b05      	ldr	r3, [pc, #20]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	4413      	add	r3, r2
 8000bf0:	4a03      	ldr	r2, [pc, #12]	@ (8000c00 <HAL_IncTick+0x20>)
 8000bf2:	6013      	str	r3, [r2, #0]
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bc80      	pop	{r7}
 8000bfa:	4770      	bx	lr
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000598 	.word	0x20000598

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b02      	ldr	r3, [pc, #8]	@ (8000c14 <HAL_GetTick+0x10>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr
 8000c14:	20000598 	.word	0x20000598

08000c18 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	f7ff fff0 	bl	8000c04 <HAL_GetTick>
 8000c24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c30:	d005      	beq.n	8000c3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c32:	4b0a      	ldr	r3, [pc, #40]	@ (8000c5c <HAL_Delay+0x44>)
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c3e:	bf00      	nop
 8000c40:	f7ff ffe0 	bl	8000c04 <HAL_GetTick>
 8000c44:	4602      	mov	r2, r0
 8000c46:	68bb      	ldr	r3, [r7, #8]
 8000c48:	1ad3      	subs	r3, r2, r3
 8000c4a:	68fa      	ldr	r2, [r7, #12]
 8000c4c:	429a      	cmp	r2, r3
 8000c4e:	d8f7      	bhi.n	8000c40 <HAL_Delay+0x28>
  {
  }
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3710      	adds	r7, #16
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000008 	.word	0x20000008

08000c60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c70:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c72:	68db      	ldr	r3, [r3, #12]
 8000c74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c76:	68ba      	ldr	r2, [r7, #8]
 8000c78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c92:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	60d3      	str	r3, [r2, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cac:	4b04      	ldr	r3, [pc, #16]	@ (8000cc0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cae:	68db      	ldr	r3, [r3, #12]
 8000cb0:	0a1b      	lsrs	r3, r3, #8
 8000cb2:	f003 0307 	and.w	r3, r3, #7
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	db0b      	blt.n	8000cee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd6:	79fb      	ldrb	r3, [r7, #7]
 8000cd8:	f003 021f 	and.w	r2, r3, #31
 8000cdc:	4906      	ldr	r1, [pc, #24]	@ (8000cf8 <__NVIC_EnableIRQ+0x34>)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	095b      	lsrs	r3, r3, #5
 8000ce4:	2001      	movs	r0, #1
 8000ce6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cee:	bf00      	nop
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	db0a      	blt.n	8000d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	@ (8000d48 <__NVIC_SetPriority+0x4c>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	b2d2      	uxtb	r2, r2
 8000d1e:	440b      	add	r3, r1
 8000d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d24:	e00a      	b.n	8000d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	b2da      	uxtb	r2, r3
 8000d2a:	4908      	ldr	r1, [pc, #32]	@ (8000d4c <__NVIC_SetPriority+0x50>)
 8000d2c:	79fb      	ldrb	r3, [r7, #7]
 8000d2e:	f003 030f 	and.w	r3, r3, #15
 8000d32:	3b04      	subs	r3, #4
 8000d34:	0112      	lsls	r2, r2, #4
 8000d36:	b2d2      	uxtb	r2, r2
 8000d38:	440b      	add	r3, r1
 8000d3a:	761a      	strb	r2, [r3, #24]
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bc80      	pop	{r7}
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop
 8000d48:	e000e100 	.word	0xe000e100
 8000d4c:	e000ed00 	.word	0xe000ed00

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	@ 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	@ 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bc80      	pop	{r7}
 8000db2:	4770      	bx	lr

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	@ (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff90 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	@ (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	@ (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff2d 	bl	8000c60 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff42 	bl	8000ca8 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff90 	bl	8000d50 <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5f 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff35 	bl	8000cc4 <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e86:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000e88:	f7ff febc 	bl	8000c04 <HAL_GetTick>
 8000e8c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d008      	beq.n	8000eac <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	2280      	movs	r2, #128	@ 0x80
 8000e9e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e052      	b.n	8000f52 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0216 	bic.w	r2, r2, #22
 8000eba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	695a      	ldr	r2, [r3, #20]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eca:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d103      	bne.n	8000edc <HAL_DMA_Abort+0x62>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 0208 	bic.w	r2, r2, #8
 8000eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000efc:	e013      	b.n	8000f26 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000efe:	f7ff fe81 	bl	8000c04 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b05      	cmp	r3, #5
 8000f0a:	d90c      	bls.n	8000f26 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2220      	movs	r2, #32
 8000f10:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2203      	movs	r2, #3
 8000f16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	e015      	b.n	8000f52 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f003 0301 	and.w	r3, r3, #1
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d1e4      	bne.n	8000efe <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f38:	223f      	movs	r2, #63	@ 0x3f
 8000f3a:	409a      	lsls	r2, r3
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2201      	movs	r2, #1
 8000f44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d004      	beq.n	8000f78 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000f74:	2301      	movs	r3, #1
 8000f76:	e00c      	b.n	8000f92 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000f90:	2300      	movs	r3, #0
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b087      	sub	sp, #28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e16f      	b.n	800128c <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	2101      	movs	r1, #1
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb8:	4013      	ands	r3, r2
 8000fba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	f000 8161 	beq.w	8001286 <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f003 0303 	and.w	r3, r3, #3
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d005      	beq.n	8000fdc <HAL_GPIO_Init+0x40>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d130      	bne.n	800103e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68da      	ldr	r2, [r3, #12]
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001012:	2201      	movs	r2, #1
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	091b      	lsrs	r3, r3, #4
 8001028:	f003 0201 	and.w	r2, r3, #1
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4313      	orrs	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 0303 	and.w	r3, r3, #3
 8001046:	2b03      	cmp	r3, #3
 8001048:	d017      	beq.n	800107a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	68db      	ldr	r3, [r3, #12]
 800104e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	2203      	movs	r2, #3
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43db      	mvns	r3, r3
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4013      	ands	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689a      	ldr	r2, [r3, #8]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d123      	bne.n	80010ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	08da      	lsrs	r2, r3, #3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	3208      	adds	r2, #8
 800108e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	691a      	ldr	r2, [r3, #16]
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	f003 0307 	and.w	r3, r3, #7
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	08da      	lsrs	r2, r3, #3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	3208      	adds	r2, #8
 80010c8:	6939      	ldr	r1, [r7, #16]
 80010ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	2203      	movs	r2, #3
 80010da:	fa02 f303 	lsl.w	r3, r2, r3
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f003 0203 	and.w	r2, r3, #3
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	005b      	lsls	r3, r3, #1
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800110a:	2b00      	cmp	r3, #0
 800110c:	f000 80bb 	beq.w	8001286 <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001110:	2300      	movs	r3, #0
 8001112:	60bb      	str	r3, [r7, #8]
 8001114:	4b64      	ldr	r3, [pc, #400]	@ (80012a8 <HAL_GPIO_Init+0x30c>)
 8001116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001118:	4a63      	ldr	r2, [pc, #396]	@ (80012a8 <HAL_GPIO_Init+0x30c>)
 800111a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800111e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001120:	4b61      	ldr	r3, [pc, #388]	@ (80012a8 <HAL_GPIO_Init+0x30c>)
 8001122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001128:	60bb      	str	r3, [r7, #8]
 800112a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800112c:	4a5f      	ldr	r2, [pc, #380]	@ (80012ac <HAL_GPIO_Init+0x310>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	089b      	lsrs	r3, r3, #2
 8001132:	3302      	adds	r3, #2
 8001134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001138:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	f003 0303 	and.w	r3, r3, #3
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	220f      	movs	r2, #15
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	43db      	mvns	r3, r3
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	4013      	ands	r3, r2
 800114e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a57      	ldr	r2, [pc, #348]	@ (80012b0 <HAL_GPIO_Init+0x314>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d031      	beq.n	80011bc <HAL_GPIO_Init+0x220>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	4a56      	ldr	r2, [pc, #344]	@ (80012b4 <HAL_GPIO_Init+0x318>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d02b      	beq.n	80011b8 <HAL_GPIO_Init+0x21c>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	4a55      	ldr	r2, [pc, #340]	@ (80012b8 <HAL_GPIO_Init+0x31c>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d025      	beq.n	80011b4 <HAL_GPIO_Init+0x218>
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4a54      	ldr	r2, [pc, #336]	@ (80012bc <HAL_GPIO_Init+0x320>)
 800116c:	4293      	cmp	r3, r2
 800116e:	d01f      	beq.n	80011b0 <HAL_GPIO_Init+0x214>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4a53      	ldr	r2, [pc, #332]	@ (80012c0 <HAL_GPIO_Init+0x324>)
 8001174:	4293      	cmp	r3, r2
 8001176:	d019      	beq.n	80011ac <HAL_GPIO_Init+0x210>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a52      	ldr	r2, [pc, #328]	@ (80012c4 <HAL_GPIO_Init+0x328>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x20c>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a51      	ldr	r2, [pc, #324]	@ (80012c8 <HAL_GPIO_Init+0x32c>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x208>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a50      	ldr	r2, [pc, #320]	@ (80012cc <HAL_GPIO_Init+0x330>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x204>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a4f      	ldr	r2, [pc, #316]	@ (80012d0 <HAL_GPIO_Init+0x334>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x200>
 8001198:	2308      	movs	r3, #8
 800119a:	e010      	b.n	80011be <HAL_GPIO_Init+0x222>
 800119c:	2309      	movs	r3, #9
 800119e:	e00e      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011a0:	2307      	movs	r3, #7
 80011a2:	e00c      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011a4:	2306      	movs	r3, #6
 80011a6:	e00a      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011a8:	2305      	movs	r3, #5
 80011aa:	e008      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011ac:	2304      	movs	r3, #4
 80011ae:	e006      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011b0:	2303      	movs	r3, #3
 80011b2:	e004      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011b4:	2302      	movs	r3, #2
 80011b6:	e002      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011b8:	2301      	movs	r3, #1
 80011ba:	e000      	b.n	80011be <HAL_GPIO_Init+0x222>
 80011bc:	2300      	movs	r3, #0
 80011be:	697a      	ldr	r2, [r7, #20]
 80011c0:	f002 0203 	and.w	r2, r2, #3
 80011c4:	0092      	lsls	r2, r2, #2
 80011c6:	4093      	lsls	r3, r2
 80011c8:	461a      	mov	r2, r3
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	4313      	orrs	r3, r2
 80011ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80011d0:	4936      	ldr	r1, [pc, #216]	@ (80012ac <HAL_GPIO_Init+0x310>)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	089b      	lsrs	r3, r3, #2
 80011d6:	3302      	adds	r3, #2
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011de:	4b3d      	ldr	r3, [pc, #244]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 80011e0:	689b      	ldr	r3, [r3, #8]
 80011e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	43db      	mvns	r3, r3
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	4013      	ands	r3, r2
 80011ec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80011fa:	693a      	ldr	r2, [r7, #16]
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001202:	4a34      	ldr	r2, [pc, #208]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 8001204:	693b      	ldr	r3, [r7, #16]
 8001206:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	4313      	orrs	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800122c:	4a29      	ldr	r2, [pc, #164]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 800122e:	693b      	ldr	r3, [r7, #16]
 8001230:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001232:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	2b00      	cmp	r3, #0
 800124c:	d003      	beq.n	8001256 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001256:	4a1f      	ldr	r2, [pc, #124]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125c:	4b1d      	ldr	r3, [pc, #116]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	43db      	mvns	r3, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4013      	ands	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d003      	beq.n	8001280 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4313      	orrs	r3, r2
 800127e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001280:	4a14      	ldr	r2, [pc, #80]	@ (80012d4 <HAL_GPIO_Init+0x338>)
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	3301      	adds	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	fa22 f303 	lsr.w	r3, r2, r3
 8001296:	2b00      	cmp	r3, #0
 8001298:	f47f ae88 	bne.w	8000fac <HAL_GPIO_Init+0x10>
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	371c      	adds	r7, #28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bc80      	pop	{r7}
 80012a6:	4770      	bx	lr
 80012a8:	40023800 	.word	0x40023800
 80012ac:	40013800 	.word	0x40013800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400
 80012b8:	40020800 	.word	0x40020800
 80012bc:	40020c00 	.word	0x40020c00
 80012c0:	40021000 	.word	0x40021000
 80012c4:	40021400 	.word	0x40021400
 80012c8:	40021800 	.word	0x40021800
 80012cc:	40021c00 	.word	0x40021c00
 80012d0:	40022000 	.word	0x40022000
 80012d4:	40013c00 	.word	0x40013c00

080012d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	460b      	mov	r3, r1
 80012e2:	807b      	strh	r3, [r7, #2]
 80012e4:	4613      	mov	r3, r2
 80012e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012e8:	787b      	ldrb	r3, [r7, #1]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d003      	beq.n	80012f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012ee:	887a      	ldrh	r2, [r7, #2]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012f4:	e003      	b.n	80012fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	041a      	lsls	r2, r3, #16
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	619a      	str	r2, [r3, #24]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af02      	add	r7, sp, #8
 800130e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e101      	b.n	800151e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001326:	b2db      	uxtb	r3, r3
 8001328:	2b00      	cmp	r3, #0
 800132a:	d106      	bne.n	800133a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f7ff fb37 	bl	80009a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2203      	movs	r2, #3
 800133e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001342:	68bb      	ldr	r3, [r7, #8]
 8001344:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001348:	d102      	bne.n	8001350 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2200      	movs	r2, #0
 800134e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f001 fbf2 	bl	8002b3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6818      	ldr	r0, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7c1a      	ldrb	r2, [r3, #16]
 8001362:	f88d 2000 	strb.w	r2, [sp]
 8001366:	3304      	adds	r3, #4
 8001368:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136a:	f001 fb8f 	bl	8002a8c <USB_CoreInit>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d005      	beq.n	8001380 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2202      	movs	r2, #2
 8001378:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e0ce      	b.n	800151e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fbe9 	bl	8002b5e <USB_SetCurrentMode>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d005      	beq.n	800139e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2202      	movs	r2, #2
 8001396:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e0bf      	b.n	800151e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800139e:	2300      	movs	r3, #0
 80013a0:	73fb      	strb	r3, [r7, #15]
 80013a2:	e04a      	b.n	800143a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	00db      	lsls	r3, r3, #3
 80013ac:	4413      	add	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	440b      	add	r3, r1
 80013b2:	3315      	adds	r3, #21
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	4613      	mov	r3, r2
 80013be:	00db      	lsls	r3, r3, #3
 80013c0:	4413      	add	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	3314      	adds	r3, #20
 80013c8:	7bfa      	ldrb	r2, [r7, #15]
 80013ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013cc:	7bfa      	ldrb	r2, [r7, #15]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	b298      	uxth	r0, r3
 80013d2:	6879      	ldr	r1, [r7, #4]
 80013d4:	4613      	mov	r3, r2
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4413      	add	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	440b      	add	r3, r1
 80013de:	332e      	adds	r3, #46	@ 0x2e
 80013e0:	4602      	mov	r2, r0
 80013e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013e4:	7bfa      	ldrb	r2, [r7, #15]
 80013e6:	6879      	ldr	r1, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	00db      	lsls	r3, r3, #3
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	440b      	add	r3, r1
 80013f2:	3318      	adds	r3, #24
 80013f4:	2200      	movs	r2, #0
 80013f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80013f8:	7bfa      	ldrb	r2, [r7, #15]
 80013fa:	6879      	ldr	r1, [r7, #4]
 80013fc:	4613      	mov	r3, r2
 80013fe:	00db      	lsls	r3, r3, #3
 8001400:	4413      	add	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	440b      	add	r3, r1
 8001406:	331c      	adds	r3, #28
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800140c:	7bfa      	ldrb	r2, [r7, #15]
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	440b      	add	r3, r1
 800141a:	3320      	adds	r3, #32
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001420:	7bfa      	ldrb	r2, [r7, #15]
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	4413      	add	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	440b      	add	r3, r1
 800142e:	3324      	adds	r3, #36	@ 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	3301      	adds	r3, #1
 8001438:	73fb      	strb	r3, [r7, #15]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	791b      	ldrb	r3, [r3, #4]
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	429a      	cmp	r2, r3
 8001442:	d3af      	bcc.n	80013a4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001444:	2300      	movs	r3, #0
 8001446:	73fb      	strb	r3, [r7, #15]
 8001448:	e044      	b.n	80014d4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800144a:	7bfa      	ldrb	r2, [r7, #15]
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	4613      	mov	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	4413      	add	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	440b      	add	r3, r1
 8001458:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	6879      	ldr	r1, [r7, #4]
 8001464:	4613      	mov	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	4413      	add	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	440b      	add	r3, r1
 800146e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001472:	7bfa      	ldrb	r2, [r7, #15]
 8001474:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001476:	7bfa      	ldrb	r2, [r7, #15]
 8001478:	6879      	ldr	r1, [r7, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4413      	add	r3, r2
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	440b      	add	r3, r1
 8001484:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800148c:	7bfa      	ldrb	r2, [r7, #15]
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	4613      	mov	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	440b      	add	r3, r1
 800149a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014a2:	7bfa      	ldrb	r2, [r7, #15]
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	4613      	mov	r3, r2
 80014a8:	00db      	lsls	r3, r3, #3
 80014aa:	4413      	add	r3, r2
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	440b      	add	r3, r1
 80014b0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014b8:	7bfa      	ldrb	r2, [r7, #15]
 80014ba:	6879      	ldr	r1, [r7, #4]
 80014bc:	4613      	mov	r3, r2
 80014be:	00db      	lsls	r3, r3, #3
 80014c0:	4413      	add	r3, r2
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	440b      	add	r3, r1
 80014c6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80014ca:	2200      	movs	r2, #0
 80014cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	3301      	adds	r3, #1
 80014d2:	73fb      	strb	r3, [r7, #15]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	791b      	ldrb	r3, [r3, #4]
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d3b5      	bcc.n	800144a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6818      	ldr	r0, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	7c1a      	ldrb	r2, [r3, #16]
 80014e6:	f88d 2000 	strb.w	r2, [sp]
 80014ea:	3304      	adds	r3, #4
 80014ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014ee:	f001 fb83 	bl	8002bf8 <USB_DevInit>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d005      	beq.n	8001504 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e00c      	b.n	800151e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
  (void)USB_DevDisconnect(hpcd->Instance);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4618      	mov	r0, r3
 8001518:	f001 fd48 	bl	8002fac <USB_DevDisconnect>

  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3710      	adds	r7, #16
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
	...

08001528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	@ 0x28
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d101      	bne.n	800153a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e23b      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0301 	and.w	r3, r3, #1
 8001542:	2b00      	cmp	r3, #0
 8001544:	d050      	beq.n	80015e8 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001546:	4b9e      	ldr	r3, [pc, #632]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	f003 030c 	and.w	r3, r3, #12
 800154e:	2b04      	cmp	r3, #4
 8001550:	d00c      	beq.n	800156c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001552:	4b9b      	ldr	r3, [pc, #620]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800155a:	2b08      	cmp	r3, #8
 800155c:	d112      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155e:	4b98      	ldr	r3, [pc, #608]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800156a:	d10b      	bne.n	8001584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156c:	4b94      	ldr	r3, [pc, #592]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d036      	beq.n	80015e6 <HAL_RCC_OscConfig+0xbe>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d132      	bne.n	80015e6 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e216      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685a      	ldr	r2, [r3, #4]
 8001588:	4b8e      	ldr	r3, [pc, #568]	@ (80017c4 <HAL_RCC_OscConfig+0x29c>)
 800158a:	b2d2      	uxtb	r2, r2
 800158c:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d013      	beq.n	80015be <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001596:	f7ff fb35 	bl	8000c04 <HAL_GetTick>
 800159a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800159e:	f7ff fb31 	bl	8000c04 <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	6a3b      	ldr	r3, [r7, #32]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b64      	cmp	r3, #100	@ 0x64
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e200      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015b0:	4b83      	ldr	r3, [pc, #524]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x76>
 80015bc:	e014      	b.n	80015e8 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015be:	f7ff fb21 	bl	8000c04 <HAL_GetTick>
 80015c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c6:	f7ff fb1d 	bl	8000c04 <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	6a3b      	ldr	r3, [r7, #32]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b64      	cmp	r3, #100	@ 0x64
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e1ec      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015d8:	4b79      	ldr	r3, [pc, #484]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x9e>
 80015e4:	e000      	b.n	80015e8 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d077      	beq.n	80016e4 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80015f4:	4b72      	ldr	r3, [pc, #456]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001600:	4b6f      	ldr	r3, [pc, #444]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001608:	2b08      	cmp	r3, #8
 800160a:	d126      	bne.n	800165a <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800160c:	4b6c      	ldr	r3, [pc, #432]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d120      	bne.n	800165a <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001618:	4b69      	ldr	r3, [pc, #420]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d005      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	e1c0      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b63      	ldr	r3, [pc, #396]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	21f8      	movs	r1, #248	@ 0xf8
 800163e:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001640:	69b9      	ldr	r1, [r7, #24]
 8001642:	fa91 f1a1 	rbit	r1, r1
 8001646:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001648:	6979      	ldr	r1, [r7, #20]
 800164a:	fab1 f181 	clz	r1, r1
 800164e:	b2c9      	uxtb	r1, r1
 8001650:	408b      	lsls	r3, r1
 8001652:	495b      	ldr	r1, [pc, #364]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001658:	e044      	b.n	80016e4 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d02a      	beq.n	80016b8 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001662:	4b59      	ldr	r3, [pc, #356]	@ (80017c8 <HAL_RCC_OscConfig+0x2a0>)
 8001664:	2201      	movs	r2, #1
 8001666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7ff facc 	bl	8000c04 <HAL_GetTick>
 800166c:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	e008      	b.n	8001682 <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001670:	f7ff fac8 	bl	8000c04 <HAL_GetTick>
 8001674:	4602      	mov	r2, r0
 8001676:	6a3b      	ldr	r3, [r7, #32]
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e197      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001682:	4b4f      	ldr	r3, [pc, #316]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d0f0      	beq.n	8001670 <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800168e:	4b4c      	ldr	r3, [pc, #304]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691b      	ldr	r3, [r3, #16]
 800169a:	21f8      	movs	r1, #248	@ 0xf8
 800169c:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800169e:	6939      	ldr	r1, [r7, #16]
 80016a0:	fa91 f1a1 	rbit	r1, r1
 80016a4:	60f9      	str	r1, [r7, #12]
  return result;
 80016a6:	68f9      	ldr	r1, [r7, #12]
 80016a8:	fab1 f181 	clz	r1, r1
 80016ac:	b2c9      	uxtb	r1, r1
 80016ae:	408b      	lsls	r3, r1
 80016b0:	4943      	ldr	r1, [pc, #268]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	600b      	str	r3, [r1, #0]
 80016b6:	e015      	b.n	80016e4 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b8:	4b43      	ldr	r3, [pc, #268]	@ (80017c8 <HAL_RCC_OscConfig+0x2a0>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016be:	f7ff faa1 	bl	8000c04 <HAL_GetTick>
 80016c2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016c4:	e008      	b.n	80016d8 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c6:	f7ff fa9d 	bl	8000c04 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	6a3b      	ldr	r3, [r7, #32]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d901      	bls.n	80016d8 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e16c      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d8:	4b39      	ldr	r3, [pc, #228]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 0302 	and.w	r3, r3, #2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d1f0      	bne.n	80016c6 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0308 	and.w	r3, r3, #8
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d030      	beq.n	8001752 <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d016      	beq.n	8001726 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f8:	4b34      	ldr	r3, [pc, #208]	@ (80017cc <HAL_RCC_OscConfig+0x2a4>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016fe:	f7ff fa81 	bl	8000c04 <HAL_GetTick>
 8001702:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001704:	e008      	b.n	8001718 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001706:	f7ff fa7d 	bl	8000c04 <HAL_GetTick>
 800170a:	4602      	mov	r2, r0
 800170c:	6a3b      	ldr	r3, [r7, #32]
 800170e:	1ad3      	subs	r3, r2, r3
 8001710:	2b02      	cmp	r3, #2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e14c      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001718:	4b29      	ldr	r3, [pc, #164]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 800171a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d0f0      	beq.n	8001706 <HAL_RCC_OscConfig+0x1de>
 8001724:	e015      	b.n	8001752 <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001726:	4b29      	ldr	r3, [pc, #164]	@ (80017cc <HAL_RCC_OscConfig+0x2a4>)
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172c:	f7ff fa6a 	bl	8000c04 <HAL_GetTick>
 8001730:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fa66 	bl	8000c04 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e135      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001746:	4b1e      	ldr	r3, [pc, #120]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001748:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800174a:	f003 0302 	and.w	r3, r3, #2
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0304 	and.w	r3, r3, #4
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8087 	beq.w	800186e <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001766:	4b16      	ldr	r3, [pc, #88]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d110      	bne.n	8001794 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	4b12      	ldr	r3, [pc, #72]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177a:	4a11      	ldr	r2, [pc, #68]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6413      	str	r3, [r2, #64]	@ 0x40
 8001782:	4b0f      	ldr	r3, [pc, #60]	@ (80017c0 <HAL_RCC_OscConfig+0x298>)
 8001784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001794:	4b0e      	ldr	r3, [pc, #56]	@ (80017d0 <HAL_RCC_OscConfig+0x2a8>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a0d      	ldr	r2, [pc, #52]	@ (80017d0 <HAL_RCC_OscConfig+0x2a8>)
 800179a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800179e:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017a0:	4b0b      	ldr	r3, [pc, #44]	@ (80017d0 <HAL_RCC_OscConfig+0x2a8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d122      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017ac:	4b08      	ldr	r3, [pc, #32]	@ (80017d0 <HAL_RCC_OscConfig+0x2a8>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a07      	ldr	r2, [pc, #28]	@ (80017d0 <HAL_RCC_OscConfig+0x2a8>)
 80017b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017b8:	f7ff fa24 	bl	8000c04 <HAL_GetTick>
 80017bc:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017be:	e012      	b.n	80017e6 <HAL_RCC_OscConfig+0x2be>
 80017c0:	40023800 	.word	0x40023800
 80017c4:	40023802 	.word	0x40023802
 80017c8:	42470000 	.word	0x42470000
 80017cc:	42470e80 	.word	0x42470e80
 80017d0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017d4:	f7ff fa16 	bl	8000c04 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	6a3b      	ldr	r3, [r7, #32]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b02      	cmp	r3, #2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e0e5      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e6:	4b75      	ldr	r3, [pc, #468]	@ (80019bc <HAL_RCC_OscConfig+0x494>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	4b72      	ldr	r3, [pc, #456]	@ (80019c0 <HAL_RCC_OscConfig+0x498>)
 80017f8:	b2d2      	uxtb	r2, r2
 80017fa:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d015      	beq.n	8001830 <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001804:	f7ff f9fe 	bl	8000c04 <HAL_GetTick>
 8001808:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800180c:	f7ff f9fa 	bl	8000c04 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	6a3b      	ldr	r3, [r7, #32]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e0c7      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001822:	4b68      	ldr	r3, [pc, #416]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 8001824:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d0ee      	beq.n	800180c <HAL_RCC_OscConfig+0x2e4>
 800182e:	e014      	b.n	800185a <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001830:	f7ff f9e8 	bl	8000c04 <HAL_GetTick>
 8001834:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001836:	e00a      	b.n	800184e <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001838:	f7ff f9e4 	bl	8000c04 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a3b      	ldr	r3, [r7, #32]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001846:	4293      	cmp	r3, r2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e0b1      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800184e:	4b5d      	ldr	r3, [pc, #372]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ee      	bne.n	8001838 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800185a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800185e:	2b01      	cmp	r3, #1
 8001860:	d105      	bne.n	800186e <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001862:	4b58      	ldr	r3, [pc, #352]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	4a57      	ldr	r2, [pc, #348]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 8001868:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	699b      	ldr	r3, [r3, #24]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 809c 	beq.w	80019b0 <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001878:	4b52      	ldr	r3, [pc, #328]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d061      	beq.n	8001948 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d146      	bne.n	800191a <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188c:	4b4e      	ldr	r3, [pc, #312]	@ (80019c8 <HAL_RCC_OscConfig+0x4a0>)
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001892:	f7ff f9b7 	bl	8000c04 <HAL_GetTick>
 8001896:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800189a:	f7ff f9b3 	bl	8000c04 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	6a3b      	ldr	r3, [r7, #32]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b64      	cmp	r3, #100	@ 0x64
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e082      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018ac:	4b45      	ldr	r3, [pc, #276]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d1f0      	bne.n	800189a <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b8:	4b42      	ldr	r3, [pc, #264]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4b43      	ldr	r3, [pc, #268]	@ (80019cc <HAL_RCC_OscConfig+0x4a4>)
 80018be:	4013      	ands	r3, r2
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	69d1      	ldr	r1, [r2, #28]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	6a12      	ldr	r2, [r2, #32]
 80018c8:	4311      	orrs	r1, r2
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80018ce:	0192      	lsls	r2, r2, #6
 80018d0:	4311      	orrs	r1, r2
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80018d6:	0612      	lsls	r2, r2, #24
 80018d8:	4311      	orrs	r1, r2
 80018da:	687a      	ldr	r2, [r7, #4]
 80018dc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80018de:	0852      	lsrs	r2, r2, #1
 80018e0:	3a01      	subs	r2, #1
 80018e2:	0412      	lsls	r2, r2, #16
 80018e4:	430a      	orrs	r2, r1
 80018e6:	4937      	ldr	r1, [pc, #220]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 80018e8:	4313      	orrs	r3, r2
 80018ea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018ec:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <HAL_RCC_OscConfig+0x4a0>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f2:	f7ff f987 	bl	8000c04 <HAL_GetTick>
 80018f6:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018fa:	f7ff f983 	bl	8000c04 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b64      	cmp	r3, #100	@ 0x64
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e052      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800190c:	4b2d      	ldr	r3, [pc, #180]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d0f0      	beq.n	80018fa <HAL_RCC_OscConfig+0x3d2>
 8001918:	e04a      	b.n	80019b0 <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800191a:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_RCC_OscConfig+0x4a0>)
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001920:	f7ff f970 	bl	8000c04 <HAL_GetTick>
 8001924:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff f96c 	bl	8000c04 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	@ 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e03b      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800193a:	4b22      	ldr	r3, [pc, #136]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x400>
 8001946:	e033      	b.n	80019b0 <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d101      	bne.n	8001954 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e02e      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001954:	4b1b      	ldr	r3, [pc, #108]	@ (80019c4 <HAL_RCC_OscConfig+0x49c>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	429a      	cmp	r2, r3
 8001966:	d121      	bne.n	80019ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001972:	429a      	cmp	r2, r3
 8001974:	d11a      	bne.n	80019ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001976:	69fa      	ldr	r2, [r7, #28]
 8001978:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800197c:	4013      	ands	r3, r2
 800197e:	687a      	ldr	r2, [r7, #4]
 8001980:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001982:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001984:	4293      	cmp	r3, r2
 8001986:	d111      	bne.n	80019ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001992:	085b      	lsrs	r3, r3, #1
 8001994:	3b01      	subs	r3, #1
 8001996:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001998:	429a      	cmp	r2, r3
 800199a:	d107      	bne.n	80019ac <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019a6:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019a8:	429a      	cmp	r2, r3
 80019aa:	d001      	beq.n	80019b0 <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e000      	b.n	80019b2 <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3728      	adds	r7, #40	@ 0x28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40007000 	.word	0x40007000
 80019c0:	40023870 	.word	0x40023870
 80019c4:	40023800 	.word	0x40023800
 80019c8:	42470060 	.word	0x42470060
 80019cc:	f0bc8000 	.word	0xf0bc8000

080019d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d101      	bne.n	80019e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0d2      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019e4:	4b6b      	ldr	r3, [pc, #428]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 030f 	and.w	r3, r3, #15
 80019ec:	683a      	ldr	r2, [r7, #0]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d90c      	bls.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019f2:	4b68      	ldr	r3, [pc, #416]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019fa:	4b66      	ldr	r3, [pc, #408]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 030f 	and.w	r3, r3, #15
 8001a02:	683a      	ldr	r2, [r7, #0]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d001      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e0be      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0302 	and.w	r3, r3, #2
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d020      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0304 	and.w	r3, r3, #4
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a24:	4b5c      	ldr	r3, [pc, #368]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	4a5b      	ldr	r2, [pc, #364]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a2a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0308 	and.w	r3, r3, #8
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d005      	beq.n	8001a48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001a3c:	4b56      	ldr	r3, [pc, #344]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	4a55      	ldr	r2, [pc, #340]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a42:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b53      	ldr	r3, [pc, #332]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	4950      	ldr	r1, [pc, #320]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d040      	beq.n	8001ae8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d107      	bne.n	8001a7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d115      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e085      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d107      	bne.n	8001a96 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a86:	4b44      	ldr	r3, [pc, #272]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e079      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a96:	4b40      	ldr	r3, [pc, #256]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e071      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f023 0203 	bic.w	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4939      	ldr	r1, [pc, #228]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ab8:	f7ff f8a4 	bl	8000c04 <HAL_GetTick>
 8001abc:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac0:	f7ff f8a0 	bl	8000c04 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e059      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ad6:	4b30      	ldr	r3, [pc, #192]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 020c 	and.w	r2, r3, #12
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d1eb      	bne.n	8001ac0 <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae8:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 030f 	and.w	r3, r3, #15
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	429a      	cmp	r2, r3
 8001af4:	d20c      	bcs.n	8001b10 <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af6:	4b27      	ldr	r3, [pc, #156]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afe:	4b25      	ldr	r3, [pc, #148]	@ (8001b94 <HAL_RCC_ClockConfig+0x1c4>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	683a      	ldr	r2, [r7, #0]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d001      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e03c      	b.n	8001b8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d008      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	491b      	ldr	r1, [pc, #108]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b3a:	4b17      	ldr	r3, [pc, #92]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	691b      	ldr	r3, [r3, #16]
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4913      	ldr	r1, [pc, #76]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8001b4e:	f000 f82b 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001b52:	4601      	mov	r1, r0
 8001b54:	4b10      	ldr	r3, [pc, #64]	@ (8001b98 <HAL_RCC_ClockConfig+0x1c8>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b5c:	22f0      	movs	r2, #240	@ 0xf0
 8001b5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	693a      	ldr	r2, [r7, #16]
 8001b62:	fa92 f2a2 	rbit	r2, r2
 8001b66:	60fa      	str	r2, [r7, #12]
  return result;
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	fab2 f282 	clz	r2, r2
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	40d3      	lsrs	r3, r2
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <HAL_RCC_ClockConfig+0x1cc>)
 8001b74:	5cd3      	ldrb	r3, [r2, r3]
 8001b76:	fa21 f303 	lsr.w	r3, r1, r3
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <HAL_RCC_ClockConfig+0x1d0>)
 8001b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_RCC_ClockConfig+0x1d4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fffc 	bl	8000b80 <HAL_InitTick>

  return HAL_OK;
 8001b88:	2300      	movs	r3, #0
}
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	3718      	adds	r7, #24
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	080030d8 	.word	0x080030d8
 8001ba0:	20000000 	.word	0x20000000
 8001ba4:	20000004 	.word	0x20000004

08001ba8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ba8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bac:	b094      	sub	sp, #80	@ 0x50
 8001bae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	647b      	str	r3, [r7, #68]	@ 0x44
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001bb8:	2300      	movs	r3, #0
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bc0:	4b7c      	ldr	r3, [pc, #496]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	f003 030c 	and.w	r3, r3, #12
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d00d      	beq.n	8001be8 <HAL_RCC_GetSysClockFreq+0x40>
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	f200 80e7 	bhi.w	8001da0 <HAL_RCC_GetSysClockFreq+0x1f8>
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d002      	beq.n	8001bdc <HAL_RCC_GetSysClockFreq+0x34>
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d003      	beq.n	8001be2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bda:	e0e1      	b.n	8001da0 <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bdc:	4b76      	ldr	r3, [pc, #472]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x210>)
 8001bde:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8001be0:	e0e1      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001be2:	4b76      	ldr	r3, [pc, #472]	@ (8001dbc <HAL_RCC_GetSysClockFreq+0x214>)
 8001be4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001be6:	e0de      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001be8:	4b72      	ldr	r3, [pc, #456]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001bf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001bf2:	4b70      	ldr	r3, [pc, #448]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d065      	beq.n	8001cca <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	099b      	lsrs	r3, r3, #6
 8001c04:	2200      	movs	r2, #0
 8001c06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001c08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001c10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001c16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001c1a:	4622      	mov	r2, r4
 8001c1c:	462b      	mov	r3, r5
 8001c1e:	f04f 0000 	mov.w	r0, #0
 8001c22:	f04f 0100 	mov.w	r1, #0
 8001c26:	0159      	lsls	r1, r3, #5
 8001c28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c2c:	0150      	lsls	r0, r2, #5
 8001c2e:	4602      	mov	r2, r0
 8001c30:	460b      	mov	r3, r1
 8001c32:	4621      	mov	r1, r4
 8001c34:	1a51      	subs	r1, r2, r1
 8001c36:	6139      	str	r1, [r7, #16]
 8001c38:	4629      	mov	r1, r5
 8001c3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	f04f 0200 	mov.w	r2, #0
 8001c44:	f04f 0300 	mov.w	r3, #0
 8001c48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001c4c:	4659      	mov	r1, fp
 8001c4e:	018b      	lsls	r3, r1, #6
 8001c50:	4651      	mov	r1, sl
 8001c52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001c56:	4651      	mov	r1, sl
 8001c58:	018a      	lsls	r2, r1, #6
 8001c5a:	46d4      	mov	ip, sl
 8001c5c:	ebb2 080c 	subs.w	r8, r2, ip
 8001c60:	4659      	mov	r1, fp
 8001c62:	eb63 0901 	sbc.w	r9, r3, r1
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c7a:	4690      	mov	r8, r2
 8001c7c:	4699      	mov	r9, r3
 8001c7e:	4623      	mov	r3, r4
 8001c80:	eb18 0303 	adds.w	r3, r8, r3
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	462b      	mov	r3, r5
 8001c88:	eb49 0303 	adc.w	r3, r9, r3
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	f04f 0200 	mov.w	r2, #0
 8001c92:	f04f 0300 	mov.w	r3, #0
 8001c96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	024b      	lsls	r3, r1, #9
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	4629      	mov	r1, r5
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001ca8:	4601      	mov	r1, r0
 8001caa:	024a      	lsls	r2, r1, #9
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cb6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001cb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001cbc:	f7fe fa82 	bl	80001c4 <__aeabi_uldivmod>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001cc8:	e05c      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cca:	4b3a      	ldr	r3, [pc, #232]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	099b      	lsrs	r3, r3, #6
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001cda:	623b      	str	r3, [r7, #32]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ce0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001ce4:	4642      	mov	r2, r8
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	f04f 0000 	mov.w	r0, #0
 8001cec:	f04f 0100 	mov.w	r1, #0
 8001cf0:	0159      	lsls	r1, r3, #5
 8001cf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cf6:	0150      	lsls	r0, r2, #5
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	46c4      	mov	ip, r8
 8001cfe:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001d02:	4640      	mov	r0, r8
 8001d04:	4649      	mov	r1, r9
 8001d06:	468c      	mov	ip, r1
 8001d08:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001d0c:	f04f 0200 	mov.w	r2, #0
 8001d10:	f04f 0300 	mov.w	r3, #0
 8001d14:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001d18:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001d1c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001d20:	ebb2 040a 	subs.w	r4, r2, sl
 8001d24:	eb63 050b 	sbc.w	r5, r3, fp
 8001d28:	f04f 0200 	mov.w	r2, #0
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	00eb      	lsls	r3, r5, #3
 8001d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001d36:	00e2      	lsls	r2, r4, #3
 8001d38:	4614      	mov	r4, r2
 8001d3a:	461d      	mov	r5, r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	18e3      	adds	r3, r4, r3
 8001d40:	603b      	str	r3, [r7, #0]
 8001d42:	460b      	mov	r3, r1
 8001d44:	eb45 0303 	adc.w	r3, r5, r3
 8001d48:	607b      	str	r3, [r7, #4]
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	f04f 0300 	mov.w	r3, #0
 8001d52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d56:	4629      	mov	r1, r5
 8001d58:	028b      	lsls	r3, r1, #10
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	4604      	mov	r4, r0
 8001d60:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001d64:	4601      	mov	r1, r0
 8001d66:	028a      	lsls	r2, r1, #10
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d6e:	2200      	movs	r2, #0
 8001d70:	61bb      	str	r3, [r7, #24]
 8001d72:	61fa      	str	r2, [r7, #28]
 8001d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001d78:	f7fe fa24 	bl	80001c4 <__aeabi_uldivmod>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	460b      	mov	r3, r1
 8001d80:	4613      	mov	r3, r2
 8001d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d84:	4b0b      	ldr	r3, [pc, #44]	@ (8001db4 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	0c1b      	lsrs	r3, r3, #16
 8001d8a:	f003 0303 	and.w	r3, r3, #3
 8001d8e:	3301      	adds	r3, #1
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001d94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001d96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001d9e:	e002      	b.n	8001da6 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001da0:	4b05      	ldr	r3, [pc, #20]	@ (8001db8 <HAL_RCC_GetSysClockFreq+0x210>)
 8001da2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001da4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001da6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3750      	adds	r7, #80	@ 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800
 8001db8:	00f42400 	.word	0x00f42400
 8001dbc:	007a1200 	.word	0x007a1200

08001dc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc4:	4b02      	ldr	r3, [pc, #8]	@ (8001dd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr
 8001dd0:	20000000 	.word	0x20000000

08001dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8001dda:	f7ff fff1 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001dde:	4601      	mov	r1, r0
 8001de0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e10 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001de8:	f44f 52e0 	mov.w	r2, #7168	@ 0x1c00
 8001dec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	fa92 f2a2 	rbit	r2, r2
 8001df4:	603a      	str	r2, [r7, #0]
  return result;
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	fab2 f282 	clz	r2, r2
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	40d3      	lsrs	r3, r2
 8001e00:	4a04      	ldr	r2, [pc, #16]	@ (8001e14 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001e02:	5cd3      	ldrb	r3, [r2, r3]
 8001e04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40023800 	.word	0x40023800
 8001e14:	080030e8 	.word	0x080030e8

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 8001e1e:	f7ff ffcf 	bl	8001dc0 <HAL_RCC_GetHCLKFreq>
 8001e22:	4601      	mov	r1, r0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	@ (8001e54 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8001e2c:	f44f 4260 	mov.w	r2, #57344	@ 0xe000
 8001e30:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	fa92 f2a2 	rbit	r2, r2
 8001e38:	603a      	str	r2, [r7, #0]
  return result;
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	fab2 f282 	clz	r2, r2
 8001e40:	b2d2      	uxtb	r2, r2
 8001e42:	40d3      	lsrs	r3, r2
 8001e44:	4a04      	ldr	r2, [pc, #16]	@ (8001e58 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001e46:	5cd3      	ldrb	r3, [r2, r3]
 8001e48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40023800 	.word	0x40023800
 8001e58:	080030e8 	.word	0x080030e8

08001e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e042      	b.n	8001ef4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fce4 	bl	8000850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	@ 0x24
 8001e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fd09 	bl	80028b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}

08001efc <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d121      	bne.n	8001f5a <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_UART_Transmit_IT+0x26>
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e01a      	b.n	8001f5c <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	68ba      	ldr	r2, [r7, #8]
 8001f2a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	88fa      	ldrh	r2, [r7, #6]
 8001f30:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	88fa      	ldrh	r2, [r7, #6]
 8001f36:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2221      	movs	r2, #33	@ 0x21
 8001f42:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f54:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8001f5a:	2302      	movs	r3, #2
  }
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr

08001f66 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b084      	sub	sp, #16
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	60b9      	str	r1, [r7, #8]
 8001f70:	4613      	mov	r3, r2
 8001f72:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b20      	cmp	r3, #32
 8001f7e:	d112      	bne.n	8001fa6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <HAL_UART_Receive_IT+0x26>
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d101      	bne.n	8001f90 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e00b      	b.n	8001fa8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2200      	movs	r2, #0
 8001f94:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f96:	88fb      	ldrh	r3, [r7, #6]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	68b9      	ldr	r1, [r7, #8]
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f000 fab6 	bl	800250e <UART_Start_Receive_IT>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	e000      	b.n	8001fa8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001fa6:	2302      	movs	r3, #2
  }
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3710      	adds	r7, #16
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b0ba      	sub	sp, #232	@ 0xe8
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	695b      	ldr	r3, [r3, #20]
 8001fd2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fe6:	f003 030f 	and.w	r3, r3, #15
 8001fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001fee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d10f      	bne.n	8002016 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ffa:	f003 0320 	and.w	r3, r3, #32
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_UART_IRQHandler+0x66>
 8002002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 fb93 	bl	800273a <UART_Receive_IT>
      return;
 8002014:	e25b      	b.n	80024ce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002016:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800201a:	2b00      	cmp	r3, #0
 800201c:	f000 80de 	beq.w	80021dc <HAL_UART_IRQHandler+0x22c>
 8002020:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	d106      	bne.n	800203a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800202c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002030:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80d1 	beq.w	80021dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800203a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800203e:	f003 0301 	and.w	r3, r3, #1
 8002042:	2b00      	cmp	r3, #0
 8002044:	d00b      	beq.n	800205e <HAL_UART_IRQHandler+0xae>
 8002046:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800204a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204e:	2b00      	cmp	r3, #0
 8002050:	d005      	beq.n	800205e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002056:	f043 0201 	orr.w	r2, r3, #1
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800205e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002062:	f003 0304 	and.w	r3, r3, #4
 8002066:	2b00      	cmp	r3, #0
 8002068:	d00b      	beq.n	8002082 <HAL_UART_IRQHandler+0xd2>
 800206a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d005      	beq.n	8002082 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207a:	f043 0202 	orr.w	r2, r3, #2
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002082:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00b      	beq.n	80020a6 <HAL_UART_IRQHandler+0xf6>
 800208e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800209e:	f043 0204 	orr.w	r2, r3, #4
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80020a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d011      	beq.n	80020d6 <HAL_UART_IRQHandler+0x126>
 80020b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d105      	bne.n	80020ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d005      	beq.n	80020d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	f043 0208 	orr.w	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 81f2 	beq.w	80024c4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d008      	beq.n	80020fe <HAL_UART_IRQHandler+0x14e>
 80020ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d002      	beq.n	80020fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 fb1e 	bl	800273a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002108:	2b40      	cmp	r3, #64	@ 0x40
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d103      	bne.n	800212a <HAL_UART_IRQHandler+0x17a>
 8002122:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002126:	2b00      	cmp	r3, #0
 8002128:	d04f      	beq.n	80021ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 fa28 	bl	8002580 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800213a:	2b40      	cmp	r3, #64	@ 0x40
 800213c:	d141      	bne.n	80021c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	3314      	adds	r3, #20
 8002144:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002148:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800214c:	e853 3f00 	ldrex	r3, [r3]
 8002150:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002154:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002158:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800215c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	3314      	adds	r3, #20
 8002166:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800216a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800216e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002172:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002176:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800217a:	e841 2300 	strex	r3, r2, [r1]
 800217e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002182:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1d9      	bne.n	800213e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800218e:	2b00      	cmp	r3, #0
 8002190:	d013      	beq.n	80021ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002196:	4a7e      	ldr	r2, [pc, #504]	@ (8002390 <HAL_UART_IRQHandler+0x3e0>)
 8002198:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	4618      	mov	r0, r3
 80021a0:	f7fe fedb 	bl	8000f5a <HAL_DMA_Abort_IT>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d016      	beq.n	80021d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80021b0:	687a      	ldr	r2, [r7, #4]
 80021b2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80021b4:	4610      	mov	r0, r2
 80021b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	e00e      	b.n	80021d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f993 	bl	80024e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c0:	e00a      	b.n	80021d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f98f 	bl	80024e6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	e006      	b.n	80021d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 f98b 	bl	80024e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80021d6:	e175      	b.n	80024c4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021d8:	bf00      	nop
    return;
 80021da:	e173      	b.n	80024c4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	f040 814f 	bne.w	8002484 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80021ea:	f003 0310 	and.w	r3, r3, #16
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8148 	beq.w	8002484 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80021f8:	f003 0310 	and.w	r3, r3, #16
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	f000 8141 	beq.w	8002484 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	60bb      	str	r3, [r7, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002222:	2b40      	cmp	r3, #64	@ 0x40
 8002224:	f040 80b6 	bne.w	8002394 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002234:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8145 	beq.w	80024c8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002246:	429a      	cmp	r2, r3
 8002248:	f080 813e 	bcs.w	80024c8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002252:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002258:	69db      	ldr	r3, [r3, #28]
 800225a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800225e:	f000 8088 	beq.w	8002372 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	330c      	adds	r3, #12
 8002268:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800226c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002270:	e853 3f00 	ldrex	r3, [r3]
 8002274:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002278:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800227c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002280:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	330c      	adds	r3, #12
 800228a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800228e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002292:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002296:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800229a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800229e:	e841 2300 	strex	r3, r2, [r1]
 80022a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80022a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1d9      	bne.n	8002262 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	3314      	adds	r3, #20
 80022b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80022b8:	e853 3f00 	ldrex	r3, [r3]
 80022bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80022be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80022c0:	f023 0301 	bic.w	r3, r3, #1
 80022c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3314      	adds	r3, #20
 80022ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80022d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80022d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80022da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80022de:	e841 2300 	strex	r3, r2, [r1]
 80022e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80022e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1e1      	bne.n	80022ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	3314      	adds	r3, #20
 80022f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80022f4:	e853 3f00 	ldrex	r3, [r3]
 80022f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80022fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80022fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002300:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	3314      	adds	r3, #20
 800230a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800230e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002310:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002312:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002314:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002316:	e841 2300 	strex	r3, r2, [r1]
 800231a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800231c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e3      	bne.n	80022ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2220      	movs	r2, #32
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	330c      	adds	r3, #12
 8002336:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002338:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800233a:	e853 3f00 	ldrex	r3, [r3]
 800233e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002340:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002342:	f023 0310 	bic.w	r3, r3, #16
 8002346:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002354:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002356:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002358:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800235a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800235c:	e841 2300 	strex	r3, r2, [r1]
 8002360:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e3      	bne.n	8002330 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fd84 	bl	8000e7a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2202      	movs	r2, #2
 8002376:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002380:	b29b      	uxth	r3, r3
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 f8b5 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800238e:	e09b      	b.n	80024c8 <HAL_UART_IRQHandler+0x518>
 8002390:	08002645 	.word	0x08002645
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800239c:	b29b      	uxth	r3, r3
 800239e:	1ad3      	subs	r3, r2, r3
 80023a0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 808e 	beq.w	80024cc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023b0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f000 8089 	beq.w	80024cc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	330c      	adds	r3, #12
 80023c0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023c4:	e853 3f00 	ldrex	r3, [r3]
 80023c8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80023ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80023d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	330c      	adds	r3, #12
 80023da:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80023de:	647a      	str	r2, [r7, #68]	@ 0x44
 80023e0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023e2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80023e4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80023e6:	e841 2300 	strex	r3, r2, [r1]
 80023ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80023ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1e3      	bne.n	80023ba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	3314      	adds	r3, #20
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023fc:	e853 3f00 	ldrex	r3, [r3]
 8002400:	623b      	str	r3, [r7, #32]
   return(result);
 8002402:	6a3b      	ldr	r3, [r7, #32]
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	3314      	adds	r3, #20
 8002412:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002416:	633a      	str	r2, [r7, #48]	@ 0x30
 8002418:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800241a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800241c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800241e:	e841 2300 	strex	r3, r2, [r1]
 8002422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1e3      	bne.n	80023f2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2220      	movs	r2, #32
 800242e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	330c      	adds	r3, #12
 800243e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	e853 3f00 	ldrex	r3, [r3]
 8002446:	60fb      	str	r3, [r7, #12]
   return(result);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f023 0310 	bic.w	r3, r3, #16
 800244e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	330c      	adds	r3, #12
 8002458:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800245c:	61fa      	str	r2, [r7, #28]
 800245e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002460:	69b9      	ldr	r1, [r7, #24]
 8002462:	69fa      	ldr	r2, [r7, #28]
 8002464:	e841 2300 	strex	r3, r2, [r1]
 8002468:	617b      	str	r3, [r7, #20]
   return(result);
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1e3      	bne.n	8002438 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2202      	movs	r2, #2
 8002474:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002476:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800247a:	4619      	mov	r1, r3
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f83b 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002482:	e023      	b.n	80024cc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800248c:	2b00      	cmp	r3, #0
 800248e:	d009      	beq.n	80024a4 <HAL_UART_IRQHandler+0x4f4>
 8002490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002498:	2b00      	cmp	r3, #0
 800249a:	d003      	beq.n	80024a4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f000 f8e5 	bl	800266c <UART_Transmit_IT>
    return;
 80024a2:	e014      	b.n	80024ce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80024a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80024a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00e      	beq.n	80024ce <HAL_UART_IRQHandler+0x51e>
 80024b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80024b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d008      	beq.n	80024ce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f000 f924 	bl	800270a <UART_EndTransmit_IT>
    return;
 80024c2:	e004      	b.n	80024ce <HAL_UART_IRQHandler+0x51e>
    return;
 80024c4:	bf00      	nop
 80024c6:	e002      	b.n	80024ce <HAL_UART_IRQHandler+0x51e>
      return;
 80024c8:	bf00      	nop
 80024ca:	e000      	b.n	80024ce <HAL_UART_IRQHandler+0x51e>
      return;
 80024cc:	bf00      	nop
  }
}
 80024ce:	37e8      	adds	r7, #232	@ 0xe8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bc80      	pop	{r7}
 80024e4:	4770      	bx	lr

080024e6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr

080024f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	bc80      	pop	{r7}
 800250c:	4770      	bx	lr

0800250e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800250e:	b480      	push	{r7}
 8002510:	b085      	sub	sp, #20
 8002512:	af00      	add	r7, sp, #0
 8002514:	60f8      	str	r0, [r7, #12]
 8002516:	60b9      	str	r1, [r7, #8]
 8002518:	4613      	mov	r3, r2
 800251a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	88fa      	ldrh	r2, [r7, #6]
 8002526:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	88fa      	ldrh	r2, [r7, #6]
 800252c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2222      	movs	r2, #34	@ 0x22
 8002538:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d007      	beq.n	8002554 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002552:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	695a      	ldr	r2, [r3, #20]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f042 0201 	orr.w	r2, r2, #1
 8002562:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f042 0220 	orr.w	r2, r2, #32
 8002572:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002580:	b480      	push	{r7}
 8002582:	b095      	sub	sp, #84	@ 0x54
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	330c      	adds	r3, #12
 800258e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002590:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002592:	e853 3f00 	ldrex	r3, [r3]
 8002596:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800259a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800259e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	330c      	adds	r3, #12
 80025a6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025a8:	643a      	str	r2, [r7, #64]	@ 0x40
 80025aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025ae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025b0:	e841 2300 	strex	r3, r2, [r1]
 80025b4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1e5      	bne.n	8002588 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	3314      	adds	r3, #20
 80025c2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c4:	6a3b      	ldr	r3, [r7, #32]
 80025c6:	e853 3f00 	ldrex	r3, [r3]
 80025ca:	61fb      	str	r3, [r7, #28]
   return(result);
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3314      	adds	r3, #20
 80025da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80025de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80025e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025e4:	e841 2300 	strex	r3, r2, [r1]
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80025ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e5      	bne.n	80025bc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d119      	bne.n	800262c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	330c      	adds	r3, #12
 80025fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	e853 3f00 	ldrex	r3, [r3]
 8002606:	60bb      	str	r3, [r7, #8]
   return(result);
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	f023 0310 	bic.w	r3, r3, #16
 800260e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	330c      	adds	r3, #12
 8002616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002618:	61ba      	str	r2, [r7, #24]
 800261a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800261c:	6979      	ldr	r1, [r7, #20]
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	e841 2300 	strex	r3, r2, [r1]
 8002624:	613b      	str	r3, [r7, #16]
   return(result);
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d1e5      	bne.n	80025f8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800263a:	bf00      	nop
 800263c:	3754      	adds	r7, #84	@ 0x54
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff41 	bl	80024e6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800267a:	b2db      	uxtb	r3, r3
 800267c:	2b21      	cmp	r3, #33	@ 0x21
 800267e:	d13e      	bne.n	80026fe <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002688:	d114      	bne.n	80026b4 <UART_Transmit_IT+0x48>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d110      	bne.n	80026b4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80026a6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	1c9a      	adds	r2, r3, #2
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	621a      	str	r2, [r3, #32]
 80026b2:	e008      	b.n	80026c6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a1b      	ldr	r3, [r3, #32]
 80026b8:	1c59      	adds	r1, r3, #1
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	6211      	str	r1, [r2, #32]
 80026be:	781a      	ldrb	r2, [r3, #0]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	687a      	ldr	r2, [r7, #4]
 80026d2:	4619      	mov	r1, r3
 80026d4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d10f      	bne.n	80026fa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026e8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68da      	ldr	r2, [r3, #12]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80026f8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80026fa:	2300      	movs	r3, #0
 80026fc:	e000      	b.n	8002700 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80026fe:	2302      	movs	r3, #2
  }
}
 8002700:	4618      	mov	r0, r3
 8002702:	3714      	adds	r7, #20
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr

0800270a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68da      	ldr	r2, [r3, #12]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002720:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff fed2 	bl	80024d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b08c      	sub	sp, #48	@ 0x30
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b22      	cmp	r3, #34	@ 0x22
 800274c:	f040 80ae 	bne.w	80028ac <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002758:	d117      	bne.n	800278a <UART_Receive_IT+0x50>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d113      	bne.n	800278a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002762:	2300      	movs	r3, #0
 8002764:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800276a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	b29b      	uxth	r3, r3
 8002774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002778:	b29a      	uxth	r2, r3
 800277a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800277c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002782:	1c9a      	adds	r2, r3, #2
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	629a      	str	r2, [r3, #40]	@ 0x28
 8002788:	e026      	b.n	80027d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800278e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002790:	2300      	movs	r3, #0
 8002792:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800279c:	d007      	beq.n	80027ae <UART_Receive_IT+0x74>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10a      	bne.n	80027bc <UART_Receive_IT+0x82>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d106      	bne.n	80027bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	b2da      	uxtb	r2, r3
 80027b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e008      	b.n	80027ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80027c8:	b2da      	uxtb	r2, r3
 80027ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80027dc:	b29b      	uxth	r3, r3
 80027de:	3b01      	subs	r3, #1
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	4619      	mov	r1, r3
 80027e6:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d15d      	bne.n	80028a8 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0220 	bic.w	r2, r2, #32
 80027fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800280a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0201 	bic.w	r2, r2, #1
 800281a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2220      	movs	r2, #32
 8002820:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800282e:	2b01      	cmp	r3, #1
 8002830:	d135      	bne.n	800289e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	330c      	adds	r3, #12
 800283e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	e853 3f00 	ldrex	r3, [r3]
 8002846:	613b      	str	r3, [r7, #16]
   return(result);
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f023 0310 	bic.w	r3, r3, #16
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	330c      	adds	r3, #12
 8002856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002858:	623a      	str	r2, [r7, #32]
 800285a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285c:	69f9      	ldr	r1, [r7, #28]
 800285e:	6a3a      	ldr	r2, [r7, #32]
 8002860:	e841 2300 	strex	r3, r2, [r1]
 8002864:	61bb      	str	r3, [r7, #24]
   return(result);
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1e5      	bne.n	8002838 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0310 	and.w	r3, r3, #16
 8002876:	2b10      	cmp	r3, #16
 8002878:	d10a      	bne.n	8002890 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002894:	4619      	mov	r1, r3
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff fe2e 	bl	80024f8 <HAL_UARTEx_RxEventCallback>
 800289c:	e002      	b.n	80028a4 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f7fd fe20 	bl	80004e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e002      	b.n	80028ae <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80028a8:	2300      	movs	r3, #0
 80028aa:	e000      	b.n	80028ae <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80028ac:	2302      	movs	r3, #2
  }
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3730      	adds	r7, #48	@ 0x30
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
	...

080028b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	431a      	orrs	r2, r3
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	695b      	ldr	r3, [r3, #20]
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 80028f8:	f023 030c 	bic.w	r3, r3, #12
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	6812      	ldr	r2, [r2, #0]
 8002900:	68b9      	ldr	r1, [r7, #8]
 8002902:	430b      	orrs	r3, r1
 8002904:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	695b      	ldr	r3, [r3, #20]
 800290c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	699a      	ldr	r2, [r3, #24]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a57      	ldr	r2, [pc, #348]	@ (8002a80 <UART_SetConfig+0x1c8>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d004      	beq.n	8002930 <UART_SetConfig+0x78>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a56      	ldr	r2, [pc, #344]	@ (8002a84 <UART_SetConfig+0x1cc>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d103      	bne.n	8002938 <UART_SetConfig+0x80>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002930:	f7ff fa72 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8002934:	60f8      	str	r0, [r7, #12]
 8002936:	e002      	b.n	800293e <UART_SetConfig+0x86>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002938:	f7ff fa4c 	bl	8001dd4 <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	69db      	ldr	r3, [r3, #28]
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002946:	d14c      	bne.n	80029e2 <UART_SetConfig+0x12a>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	009a      	lsls	r2, r3, #2
 8002952:	441a      	add	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	4a4a      	ldr	r2, [pc, #296]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002960:	fba2 2303 	umull	r2, r3, r2, r3
 8002964:	095b      	lsrs	r3, r3, #5
 8002966:	0119      	lsls	r1, r3, #4
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4613      	mov	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	4413      	add	r3, r2
 8002970:	009a      	lsls	r2, r3, #2
 8002972:	441a      	add	r2, r3
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	fbb2 f2f3 	udiv	r2, r2, r3
 800297e:	4b42      	ldr	r3, [pc, #264]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002980:	fba3 0302 	umull	r0, r3, r3, r2
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	2064      	movs	r0, #100	@ 0x64
 8002988:	fb00 f303 	mul.w	r3, r0, r3
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	3332      	adds	r3, #50	@ 0x32
 8002992:	4a3d      	ldr	r2, [pc, #244]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002994:	fba2 2303 	umull	r2, r3, r2, r3
 8002998:	095b      	lsrs	r3, r3, #5
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80029a0:	4419      	add	r1, r3
 80029a2:	68fa      	ldr	r2, [r7, #12]
 80029a4:	4613      	mov	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	4413      	add	r3, r2
 80029aa:	009a      	lsls	r2, r3, #2
 80029ac:	441a      	add	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80029b8:	4b33      	ldr	r3, [pc, #204]	@ (8002a88 <UART_SetConfig+0x1d0>)
 80029ba:	fba3 0302 	umull	r0, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	2064      	movs	r0, #100	@ 0x64
 80029c2:	fb00 f303 	mul.w	r3, r0, r3
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	3332      	adds	r3, #50	@ 0x32
 80029cc:	4a2e      	ldr	r2, [pc, #184]	@ (8002a88 <UART_SetConfig+0x1d0>)
 80029ce:	fba2 2303 	umull	r2, r3, r2, r3
 80029d2:	095b      	lsrs	r3, r3, #5
 80029d4:	f003 0207 	and.w	r2, r3, #7
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	440a      	add	r2, r1
 80029de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80029e0:	e04a      	b.n	8002a78 <UART_SetConfig+0x1c0>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f8:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <UART_SetConfig+0x1d0>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	095b      	lsrs	r3, r3, #5
 8002a00:	0119      	lsls	r1, r3, #4
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	009a      	lsls	r2, r3, #2
 8002a0c:	441a      	add	r2, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a18:	4b1b      	ldr	r3, [pc, #108]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002a1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a1e:	095b      	lsrs	r3, r3, #5
 8002a20:	2064      	movs	r0, #100	@ 0x64
 8002a22:	fb00 f303 	mul.w	r3, r0, r3
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	011b      	lsls	r3, r3, #4
 8002a2a:	3332      	adds	r3, #50	@ 0x32
 8002a2c:	4a16      	ldr	r2, [pc, #88]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a32:	095b      	lsrs	r3, r3, #5
 8002a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a38:	4419      	add	r1, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	009a      	lsls	r2, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a50:	4b0d      	ldr	r3, [pc, #52]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002a52:	fba3 0302 	umull	r0, r3, r3, r2
 8002a56:	095b      	lsrs	r3, r3, #5
 8002a58:	2064      	movs	r0, #100	@ 0x64
 8002a5a:	fb00 f303 	mul.w	r3, r0, r3
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	3332      	adds	r3, #50	@ 0x32
 8002a64:	4a08      	ldr	r2, [pc, #32]	@ (8002a88 <UART_SetConfig+0x1d0>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	f003 020f 	and.w	r2, r3, #15
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	440a      	add	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40011000 	.word	0x40011000
 8002a84:	40011400 	.word	0x40011400
 8002a88:	51eb851f 	.word	0x51eb851f

08002a8c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	f107 001c 	add.w	r0, r7, #28
 8002a9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002a9e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d123      	bne.n	8002aee <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aaa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8002aba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002ace:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa8f 	bl	8003006 <USB_CoreReset>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	73fb      	strb	r3, [r7, #15]
 8002aec:	e010      	b.n	8002b10 <USB_CoreInit+0x84>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 fa83 	bl	8003006 <USB_CoreReset>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b08:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 8002b10:	7fbb      	ldrb	r3, [r7, #30]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d10b      	bne.n	8002b2e <USB_CoreInit+0xa2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f043 0206 	orr.w	r2, r3, #6
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f043 0220 	orr.w	r2, r3, #32
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002b3a:	b004      	add	sp, #16
 8002b3c:	4770      	bx	lr

08002b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	b083      	sub	sp, #12
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f023 0201 	bic.w	r2, r3, #1
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bc80      	pop	{r7}
 8002b5c:	4770      	bx	lr

08002b5e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b084      	sub	sp, #16
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d115      	bne.n	8002bac <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002b8c:	200a      	movs	r0, #10
 8002b8e:	f7fe f843 	bl	8000c18 <HAL_Delay>
      ms += 10U;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	330a      	adds	r3, #10
 8002b96:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fa27 	bl	8002fec <USB_GetMode>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d01e      	beq.n	8002be2 <USB_SetCurrentMode+0x84>
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	2bc7      	cmp	r3, #199	@ 0xc7
 8002ba8:	d9f0      	bls.n	8002b8c <USB_SetCurrentMode+0x2e>
 8002baa:	e01a      	b.n	8002be2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8002bbe:	200a      	movs	r0, #10
 8002bc0:	f7fe f82a 	bl	8000c18 <HAL_Delay>
      ms += 10U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	330a      	adds	r3, #10
 8002bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa0e 	bl	8002fec <USB_GetMode>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d005      	beq.n	8002be2 <USB_SetCurrentMode+0x84>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2bc7      	cmp	r3, #199	@ 0xc7
 8002bda:	d9f0      	bls.n	8002bbe <USB_SetCurrentMode+0x60>
 8002bdc:	e001      	b.n	8002be2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e005      	b.n	8002bee <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2bc8      	cmp	r3, #200	@ 0xc8
 8002be6:	d101      	bne.n	8002bec <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e000      	b.n	8002bee <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}
	...

08002bf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002bf8:	b084      	sub	sp, #16
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b086      	sub	sp, #24
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
 8002c02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8002c06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002c12:	2300      	movs	r3, #0
 8002c14:	613b      	str	r3, [r7, #16]
 8002c16:	e009      	b.n	8002c2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	3340      	adds	r3, #64	@ 0x40
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	613b      	str	r3, [r7, #16]
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	2b0e      	cmp	r3, #14
 8002c30:	d9f2      	bls.n	8002c18 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002c32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11c      	bne.n	8002c74 <USB_DevInit+0x7c>
  {
    /*
     * disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c48:	f043 0302 	orr.w	r3, r3, #2
 8002c4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c72:	e00b      	b.n	8002c8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002c92:	461a      	mov	r2, r3
 8002c94:	2300      	movs	r3, #0
 8002c96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d10d      	bne.n	8002cbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002ca0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d104      	bne.n	8002cb2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002ca8:	2100      	movs	r1, #0
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f966 	bl	8002f7c <USB_SetDevSpeed>
 8002cb0:	e008      	b.n	8002cc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f961 	bl	8002f7c <USB_SetDevSpeed>
 8002cba:	e003      	b.n	8002cc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002cbc:	2103      	movs	r1, #3
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 f95c 	bl	8002f7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f000 f8fa 	bl	8002ec0 <USB_FlushTxFifo>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d001      	beq.n	8002cd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f923 	bl	8002f22 <USB_FlushRxFifo>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cec:	461a      	mov	r2, r3
 8002cee:	2300      	movs	r3, #0
 8002cf0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002d04:	461a      	mov	r2, r3
 8002d06:	2300      	movs	r3, #0
 8002d08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	e043      	b.n	8002d98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002d22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002d26:	d118      	bne.n	8002d5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002d40:	6013      	str	r3, [r2, #0]
 8002d42:	e013      	b.n	8002d6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d50:	461a      	mov	r2, r3
 8002d52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002d56:	6013      	str	r3, [r2, #0]
 8002d58:	e008      	b.n	8002d6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d66:	461a      	mov	r2, r3
 8002d68:	2300      	movs	r3, #0
 8002d6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	015a      	lsls	r2, r3, #5
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4413      	add	r3, r2
 8002d86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	3301      	adds	r3, #1
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d3b5      	bcc.n	8002d10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002da4:	2300      	movs	r3, #0
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	e043      	b.n	8002e32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002dbc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002dc0:	d118      	bne.n	8002df4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	e013      	b.n	8002e06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	015a      	lsls	r2, r3, #5
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4413      	add	r3, r2
 8002de6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002dea:	461a      	mov	r2, r3
 8002dec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e008      	b.n	8002e06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	015a      	lsls	r2, r3, #5
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e00:	461a      	mov	r2, r3
 8002e02:	2300      	movs	r3, #0
 8002e04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	015a      	lsls	r2, r3, #5
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e12:	461a      	mov	r2, r3
 8002e14:	2300      	movs	r3, #0
 8002e16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e24:	461a      	mov	r2, r3
 8002e26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002e2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	613b      	str	r3, [r7, #16]
 8002e32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002e36:	461a      	mov	r2, r3
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d3b5      	bcc.n	8002daa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	68fa      	ldr	r2, [r7, #12]
 8002e48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002e50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8002e5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8002e60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d105      	bne.n	8002e74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f043 0210 	orr.w	r2, r3, #16
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	699a      	ldr	r2, [r3, #24]
 8002e78:	4b10      	ldr	r3, [pc, #64]	@ (8002ebc <USB_DevInit+0x2c4>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8002e80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	699b      	ldr	r3, [r3, #24]
 8002e8c:	f043 0208 	orr.w	r2, r3, #8
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8002e94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	699b      	ldr	r3, [r3, #24]
 8002ea0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002ea4:	f043 0304 	orr.w	r3, r3, #4
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eb8:	b004      	add	sp, #16
 8002eba:	4770      	bx	lr
 8002ebc:	803c3800 	.word	0x803c3800

08002ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002eda:	d901      	bls.n	8002ee0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e01b      	b.n	8002f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	daf2      	bge.n	8002ece <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	019b      	lsls	r3, r3, #6
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	3301      	adds	r3, #1
 8002efc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f04:	d901      	bls.n	8002f0a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e006      	b.n	8002f18 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	691b      	ldr	r3, [r3, #16]
 8002f0e:	f003 0320 	and.w	r3, r3, #32
 8002f12:	2b20      	cmp	r3, #32
 8002f14:	d0f0      	beq.n	8002ef8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bc80      	pop	{r7}
 8002f20:	4770      	bx	lr

08002f22 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8002f22:	b480      	push	{r7}
 8002f24:	b085      	sub	sp, #20
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	3301      	adds	r3, #1
 8002f32:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f3a:	d901      	bls.n	8002f40 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e018      	b.n	8002f72 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	daf2      	bge.n	8002f2e <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2210      	movs	r2, #16
 8002f50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002f5e:	d901      	bls.n	8002f64 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e006      	b.n	8002f72 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	f003 0310 	and.w	r3, r3, #16
 8002f6c:	2b10      	cmp	r3, #16
 8002f6e:	d0f0      	beq.n	8002f52 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bc80      	pop	{r7}
 8002f7a:	4770      	bx	lr

08002f7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b085      	sub	sp, #20
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	460b      	mov	r3, r1
 8002f86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	78fb      	ldrb	r3, [r7, #3]
 8002f96:	68f9      	ldr	r1, [r7, #12]
 8002f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3714      	adds	r7, #20
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bc80      	pop	{r7}
 8002faa:	4770      	bx	lr

08002fac <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8002fc6:	f023 0303 	bic.w	r3, r3, #3
 8002fca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002fda:	f043 0302 	orr.w	r3, r3, #2
 8002fde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr

08002fec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b083      	sub	sp, #12
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	f003 0301 	and.w	r3, r3, #1
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	3301      	adds	r3, #1
 8003016:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800301e:	d901      	bls.n	8003024 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e01b      	b.n	800305c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	daf2      	bge.n	8003012 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800302c:	2300      	movs	r3, #0
 800302e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f043 0201 	orr.w	r2, r3, #1
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	3301      	adds	r3, #1
 8003040:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003048:	d901      	bls.n	800304e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e006      	b.n	800305c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d0f0      	beq.n	800303c <USB_CoreReset+0x36>

  return HAL_OK;
 800305a:	2300      	movs	r3, #0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	bc80      	pop	{r7}
 8003064:	4770      	bx	lr

08003066 <memset>:
 8003066:	4603      	mov	r3, r0
 8003068:	4402      	add	r2, r0
 800306a:	4293      	cmp	r3, r2
 800306c:	d100      	bne.n	8003070 <memset+0xa>
 800306e:	4770      	bx	lr
 8003070:	f803 1b01 	strb.w	r1, [r3], #1
 8003074:	e7f9      	b.n	800306a <memset+0x4>
	...

08003078 <__libc_init_array>:
 8003078:	b570      	push	{r4, r5, r6, lr}
 800307a:	2600      	movs	r6, #0
 800307c:	4d0c      	ldr	r5, [pc, #48]	@ (80030b0 <__libc_init_array+0x38>)
 800307e:	4c0d      	ldr	r4, [pc, #52]	@ (80030b4 <__libc_init_array+0x3c>)
 8003080:	1b64      	subs	r4, r4, r5
 8003082:	10a4      	asrs	r4, r4, #2
 8003084:	42a6      	cmp	r6, r4
 8003086:	d109      	bne.n	800309c <__libc_init_array+0x24>
 8003088:	f000 f81a 	bl	80030c0 <_init>
 800308c:	2600      	movs	r6, #0
 800308e:	4d0a      	ldr	r5, [pc, #40]	@ (80030b8 <__libc_init_array+0x40>)
 8003090:	4c0a      	ldr	r4, [pc, #40]	@ (80030bc <__libc_init_array+0x44>)
 8003092:	1b64      	subs	r4, r4, r5
 8003094:	10a4      	asrs	r4, r4, #2
 8003096:	42a6      	cmp	r6, r4
 8003098:	d105      	bne.n	80030a6 <__libc_init_array+0x2e>
 800309a:	bd70      	pop	{r4, r5, r6, pc}
 800309c:	f855 3b04 	ldr.w	r3, [r5], #4
 80030a0:	4798      	blx	r3
 80030a2:	3601      	adds	r6, #1
 80030a4:	e7ee      	b.n	8003084 <__libc_init_array+0xc>
 80030a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80030aa:	4798      	blx	r3
 80030ac:	3601      	adds	r6, #1
 80030ae:	e7f2      	b.n	8003096 <__libc_init_array+0x1e>
 80030b0:	080030f8 	.word	0x080030f8
 80030b4:	080030f8 	.word	0x080030f8
 80030b8:	080030f8 	.word	0x080030f8
 80030bc:	080030fc 	.word	0x080030fc

080030c0 <_init>:
 80030c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030c2:	bf00      	nop
 80030c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030c6:	bc08      	pop	{r3}
 80030c8:	469e      	mov	lr, r3
 80030ca:	4770      	bx	lr

080030cc <_fini>:
 80030cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ce:	bf00      	nop
 80030d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030d2:	bc08      	pop	{r3}
 80030d4:	469e      	mov	lr, r3
 80030d6:	4770      	bx	lr
